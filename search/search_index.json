{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Flask with file-based routing <p>             Hyperflask is built on top of Flask, a popular Python web framework. It extends it with many features, notably file-based routing using a new file format that combines python code and a jinja template (inspired by Astro pages).         </p> <p> Read more about pages \u00bb </p> A powerful component system <p>             Hyperflask introduces component-driven architecture to Flask apps. Seamlessly create frontend (web components, react, etc...) and backend components and use them in your jinja templates. Use HTMX to create server-backed interactive components.         </p> <p> Read more about components \u00bb </p> Batteries included <p>             Create interfaces with DaisyUI, send emails using MJML, run background jobs, send push events using SSE, translations, authentication, ...             Everything you need to build a product.         </p> Content driven when needed <p>             Hyperflask can be used to generate static web sites. It can also run in an hybrid mode where the server is accessed only for dynamic requests.         </p> No messing around with your environment <p>             Dev and prod environment are standardized on containers. With a tight integration with VS Code, everything is easy to setup and run.             Deploy to VPS and various cloud services in one command.         </p> <p> Get started \u00bb </p> Ensuring a thriving ecosystem <p>             The Hyperflask framework itself is a small code base. It combines many Flask extensions in a seamless manner.             All extensions and related projects are developed independently of the framework under the Hyperflask organization.             Feel free to pick and choose the part you prefer from Hyperflask and use them in your own projects.         </p> <p> Visit the Hyperflask organization on Github \u00bb </p>"},{"location":"getting-started/","title":"Getting started","text":"<p>Welcome to Hyperflask! In this getting started guide will cover the basics and create a simple chat app with authentication.</p> <p>The result of this tutorial is available as a git repository at https://github.com/hyperflask/getting-started.</p>"},{"location":"getting-started/#meet-hyperflask","title":"Meet Hyperflask","text":"<p>Hyperflask is an opiniated full stack rapid web development framework. It uses Python on the backend, powered by the Flask framework and javascript with htmx on the frontend.</p> <p>Hyperflask includes everything you need to develop an app from start to finish: </p> <ul> <li>Easy backend development</li> <li>UI framework and components</li> <li>Sending emails</li> <li>Background tasks</li> <li>Deployment</li> </ul> <p>Check out the full list of technologies used in Hyperflask on the Why Hyperflask page</p>"},{"location":"getting-started/#what-you-will-need-to-install-and-run-hyperflask","title":"What you will need to install and run Hyperflask","text":"<p>Hyperflask simplifies development environments by standardizing everything around containers.</p> <p>VS Code is also the recommended editor (and currently the only one with syntax highlighting for Jinjapy files).</p> <p>What you will need:</p> <ul> <li>A UNIX like system (Linux, MacOS or WSL on Windows)</li> <li>Docker</li> <li>VS Code</li> </ul> <p>Python is not needed on your machine, everything will be executed inside containers.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>We will use Hyperflask-Start to create our project.</p> <p>Launch the following command to create your project:</p> <pre><code>curl -L https://raw.githubusercontent.com/hyperflask/hyperflask-start/main/start.sh | bash\n</code></pre> <p>This will prompt you for some options and create the project in a new folder.</p> <p>Open your project folder in VS Code. It should prompt you to \"re-open workspace in development container\" which you should accept. VS Code will create and start the development container and re-launch itself.</p> <p>You are now developping from the container inside which you will find Python 3.11, Node &amp; npm and hyperflask installed.</p> <p>Info</p> <p>Although VS Code with development containers is the recommended experience, it is not mandatory. Hyperflask apps are standard python apps and you can install their requirements in a virtualenv and start a server using the CLI.</p>"},{"location":"getting-started/#running-your-app","title":"Running your app","text":"<p>In VS Code, press F5 or \"Start debugging\" in the command palette.</p> <p>The browser will automatically open to your new site!</p> <p>Auto-reload is enabled.</p>"},{"location":"getting-started/#first-look-at-the-code-base","title":"First look at the code base","text":"<p>In your project folder, you will find the following files and folders:</p> <ul> <li>app: your app code<ul> <li>assets: scripts and stylesheets that will be bundled using esbuild<ul> <li>main.css: tailwind entrypoint</li> </ul> </li> <li>components: components to compose your app</li> <li>pages: your site pages</li> </ul> </li> <li>public: all files in this folder are publicly accessible</li> <li>tests: tests using pytest</li> <li>.env: environment variables</li> <li>config.yml: your app configuration file</li> <li>Dockerfile: Dockerfile to build your production image</li> <li>pyproject.toml: list python dependencies and tool options</li> <li>package.json: list javascript dependencies</li> </ul>"},{"location":"getting-started/#starting-our-chat-app","title":"Starting our chat app","text":"<p>First, let's create a basic chat window with some messages. Replace the content of <code>app/pages/index.jpy</code> with the following:</p> <pre><code>{% use_layout %}\n&lt;div id=\"messages\"&gt;\n    &lt;{ChatBubble}&gt;First message!&lt;/{ChatBubble}&gt;\n    &lt;{ChatBubble}&gt;Second message!&lt;/{ChatBubble}&gt;\n&lt;/div&gt;\n</code></pre> <p>This page is made of a jinja template. We are using the <code>{% use_layout %}</code> directive to automatically extend from the default layout.</p> <p>We are using the built-in <code>ChatBubble</code> component that is provided by daisyUI and comes as part of Hyperflask UI toolkit.</p> <p>Components are included on the page using a special jinja syntax.</p> <p>Info</p> <p>Note the <code>jpy</code> file extension which references the jinjapy file format.</p>"},{"location":"getting-started/#creating-a-re-usable-component","title":"Creating a re-usable component","text":"<p>Now that we have the basic layout of our app, let's extract the chat bubble as an independant component that will handle posting new messages.</p> <p>We are going to create a <code>ChatMessage</code> component to render one message. In <code>app/components/ChatMessage.jpy</code>:</p> <pre><code>---\nfrom hyperflask import request\n\ndef post():\n    return {\"message\": request.form[\"message\"]}\n---\n&lt;{ChatBubble}&gt;\n    {{props.message|markdown}}\n&lt;/{ChatBubble}&gt;\n</code></pre> <p>The component is made of a jinja template. It receives a <code>props</code> variable that contains all the properties passed to the component.</p> <p>We have added some python code in the frontmatter of the component. We define a <code>post</code> function that tells hyperflask that this component can receive POST requests.</p> <p>The function then returns the properties that will be used to render the component.</p> <p>Let's add a form to our chat interface. Replace <code>app/pages/index.jpy</code> with the following:</p> <pre><code>{% use_layout %}\n&lt;div id=\"messages\"&gt;\n    {# messages will display here #}\n&lt;/div&gt;\n&lt;{HxForm action=url_for(\"ChatMessage\") hx_target=\"#messages\" hx_swap=\"beforeend\"}&gt;\n    &lt;{TextareaField name=\"message\" placeholder=\"Chat\" }/&gt;\n    &lt;{SubmitButton}&gt;Send&lt;/{}&gt;\n&lt;/{HxForm}&gt;\n</code></pre> <p>We are using htmx to submit our form using AJAX. Using <code>hx-target</code> and <code>hx-swap</code> we are telling htmx to put the returned content from our component call at the end of the messages div.</p> <p>Try it now and chat with yourself!</p>"},{"location":"getting-started/#making-it-persistent","title":"Making it persistent","text":"<p>Now let's ensure that our chat is persisted and that reloading the page does not clear the chat history.</p> <p>Hyperflask uses sqlorm as its ORM.</p> <p>Create your first model. In <code>app/models.py</code>, add the following:</p> <pre><code>from hyperflask.factory import db\nimport datetime\n\nclass Message(db.Model):\n    message: str\n    timestamp: datetime.datetime = db.Column(default=datetime.datetime.utcnow)\n</code></pre> <p>Modify our component to save messages:</p> <pre><code>---\nfrom hyperflask import request\nfrom app.models import db, Message\n\ndef post():\n    with db:\n        msg = Message.create(message=request.form[\"message\"])\n    return {\"message\": msg}\n---\n&lt;{ChatBubble}&gt;\n    {{props.message.message|markdown}}\n&lt;/{ChatBubble}&gt;\n</code></pre> <p>And finally the page:</p> <pre><code>---\nfrom app.models import Message\n\npage.messages = Message.find_all()\n---\n{% use_layout %}\n&lt;div id=\"messages\"&gt;\n    {% for msg in messages %}\n        &lt;{ChatMessage message=msg }/&gt;\n    {% endfor %}\n&lt;/div&gt;\n&lt;{HxForm action=url_for(\"ChatMessage\") hx_target=\"#messages\" hx_swap=\"beforeend\"}&gt;\n    &lt;{TextareaField name=\"message\" placeholder=\"Chat\" }/&gt;\n    &lt;{SubmitButton}&gt;Send&lt;/{}&gt;\n&lt;/{HxForm}&gt;\n</code></pre>"},{"location":"getting-started/#adding-real-time-chat","title":"Adding real-time chat","text":"<p>Up until now, you could only chat with yourself. We will now refactor our app to become real-time using Server-Sent-Events (SSE).</p> <p>Rather than sending back a message partial when posting a new message, we will use a dedicated send endpoint that will publish an event containing the message partial.</p> <p>Modify the <code>ChatMessage</code> component back to its simpler state:</p> <pre><code>&lt;{ChatBubble}&gt;\n    {{props.message.message|markdown}}\n&lt;/{ChatBubble}&gt;\n</code></pre> <p>Now let's create a new component <code>PostMessageForm</code> in <code>app/components/PostMessageForm.jpy</code> that will handle sending messages.</p> <p>We will also use the a form in this component to easily validate data.</p> <pre><code>---\nfrom hyperflask import page, current_app\nfrom app.models import db, Message\n\ndef post():\n    form = page.form()\n    if form.validate():\n        with db:\n            msg = Message.create(**form.data)\n        current_app.sse.publish(\"messages\", current_app.components.ChatMessage(message=msg), private=True)\n---\n{% form %}\n&lt;{HxForm form action=url_for(\"PostMessageForm\") hx_swap=\"outerHTML\"}&gt;\n    &lt;{FormField form.message.textarea(required=True, placeholder=\"Chat\") }/&gt;\n    &lt;{SubmitButton}&gt;Send&lt;/{}&gt;\n&lt;/{HxForm}&gt;\n</code></pre> <p>Let's modify <code>app/pages/index.jpy</code> to use our new component and connect to the SSE stream:</p> <pre><code>---\nfrom app.models import Message\n\npage.messages = Message.find_all()\n---\n{% use_layout %}\n&lt;{MercureStream topic=\"messages\" id=\"messages\"}&gt;\n    {% for msg in messages %}\n        &lt;{ChatMessage message=msg }/&gt;\n    {% endfor %}\n&lt;/{MercureStream}&gt;\n&lt;{PostMessageForm}/&gt;\n</code></pre> <p>Info</p> <p>The MercureStream component uses the htmx SSE extension to connect to the sse stream</p>"},{"location":"getting-started/#adding-authentication","title":"Adding authentication","text":"<p>First, let's install the hyperflask-users extension. In a VS Code terminal (while connected to the dev container), execute <code>uv add hyperflask-users</code>.</p> <p>As we will not deal with database migrations during this tutorial, delete your existing database: <code>rm databases/app.db</code>.</p> <p>Info</p> <p>Hyperflask-Users provices login and signup pages as well as everything you need for a professional authentication flow and user management.</p> <p>Let's create a user model and change our existing model to be bound to users:</p> <pre><code>from hyperflask.factory import db\nfrom hyperflask_users import UserMixin, UserRelatedMixin\nimport datetime\n\nclass User(UserMixin, db.Model):\n    pass\n\nclass Message(UserRelatedMixin, db.Model):\n    message: str\n    timestamp: datetime.datetime = db.Column(default=datetime.datetime.utcnow)\n</code></pre> <p>Modify the component <code>ChatMessage</code> to display the author:</p> <pre><code>&lt;{ChatBubble header=props.message.user.email}&gt;\n    {{props.message.message|markdown}}\n&lt;/{ChatBubble}&gt;\n</code></pre> <p>Finally, add <code>page.login_required()</code> at the top of your page frontmatter to require authentication to access it.</p>"},{"location":"getting-started/#deploying-to-production","title":"Deploying to production","text":"<p>Signup for an account on Fly.io or any VPS provider (eg: Digital Ocean) then run the following command from a VS Code terminal (while connected to the dev container):</p> <pre><code>uv run hyperflask deploy\n</code></pre> <p>Some information will be requested then the deployment will happen automatically. Connect to your domain and voil\u00e0!</p>"},{"location":"getting-started/#going-further","title":"Going further","text":"<p>Checkout the Github repository with the result of this tutorial and more. It also includes a nice UI, chat rooms, etc...</p>"},{"location":"roadmap/","title":"Roadmap","text":"<p>Hyperflask is being actively developed and is not yet ready for production.</p> <p>Checkout the list of all the projects developed as part of the Hyperflask Stack and their current development status on the Hyperflask Github organization homepage.</p> <p>Planned v1 experience:</p> Feature Status Notes Related Hyperflask project File based routing with mix code page format \u2705 flask-file-routes ORM \u2705 sqlorm, flask-sqlorm Assets pipeline \u2705 flask-assets-pipeline Component system + component library \u2705 hyperflask, jinja-super-macros, flask-super-macros, uilib-spec, uilib-spec-daisyui User management and auth \ud83d\udea7 missing social logins hyperflask-auth Collections \u2705 flask-collections Upload files \u2705 flask-files Emails \u2705 flask-mailman-templates Background tasks \ud83d\udea7 missing sqlite broker dramatiq-sqlite SSE push \u2705 flask-mercure-sse I18n \ud83d\udea7 finalizing flask-babel-hyper Static site generation \u274c hyperflask Deployments \u274c docker-web-deploy VS Code integration \u2705 Documentation \ud83d\udea7 hyperflask-docs"},{"location":"roadmap/#upcoming-features","title":"Upcoming features","text":"Feature Status Notes Related Hyperflask project REST APIs \ud83d\udea7 Flask-Resourceful Seamless reactivity between frontend and backend \ud83d\udea7 hyperflask"},{"location":"roadmap/#extras","title":"Extras","text":"Feature Status Notes Related Hyperflask project Stripe Checkout \u2705 flask-stripe-checkout Monitoring \u2705 flask-sentry, flask-observability Analytics \ud83d\udea7 flask-product-analytics"},{"location":"why/","title":"Why Hyperflask ?","text":"<p>The goal of the Hyperflask stack is to provide a single unified web stack, built on top of Python and proven technologies, where all components have been designed to work together seamlessly.</p> <p>It intends to provide solo devs and small teams a solution that allows them to build and operate a website/web app with minimal boilerplate and overhead. All the focus can go to work on the actual product.</p>"},{"location":"why/#key-goals","title":"Key goals","text":"<ul> <li>Full stack experience, from dev environment to UI framework to deployment</li> <li>All the tech choices have been made so you don't need to ask yourself tech stack questions</li> <li>Fully Open-Source stack that is 100% self-hostable if desired (no dependencies on cloud services)</li> <li>Use proven technologies and rely on standards as much as possible</li> <li>Backend driven with static content generation when needed</li> <li>Built for pragmatical but professional production apps</li> <li>Great developer experience and high productivity</li> <li>Beginner friendly but well engineered for advanced use cases</li> <li>Optimized for solo developers and small teams</li> <li>Can run on cheap machines or VMs from any server/cloud providers</li> </ul>"},{"location":"why/#features-and-technologies","title":"Features and technologies","text":"<ul> <li>Web framework built on top of Flask as a set of extensions</li> <li>File-based and/or app-based routing</li> <li>A new file format combining python code in frontmatter and html templates to define routes</li> <li>SQL focused ORM with sqlorm, optimized for sqlite</li> <li>Modern asset pipeline using esbuild and tailwindcss</li> <li>Deep integration with htmx</li> <li>Easily create reusable backend and frontend components</li> <li>Build frontend components using Web Components, Alpine.js, React and more. Mix technologies at will.</li> <li>Component library based on daisyUI with icons from Bootstrap Icons</li> <li>Authentication and user management with social logins and MFA</li> <li>Static content collections to easily create blogs and manage static content</li> <li>File management with built-in image manipulation and S3 integration</li> <li>Template based emails with mjml support</li> <li>Background tasks using dramatiq with sqlite as the default broker</li> <li>Push support for realtime pages using server-sent events</li> <li>I18n using gettext</li> <li>Static, hybrid or dynamic modes for content serving</li> <li>Dev environment based on Development Containers</li> <li>Deep integration with VS Code with full support for interactive debugging</li> <li>Deploy to VPS or docker-based hosting in one command</li> <li>Easy setup analytics and observability</li> </ul>"},{"location":"why/#the-hyperflask-umbrella","title":"The Hyperflask umbrella","text":"<p>Many of the features of the Hyperflask framework are provided through Flask extensions and other libraries. A good portion of them are being developed under the Hyperflask umbrella. They are kept independant so they can be re-used in other projects outside of Hyperflask.</p> <p>Checkout the Github organization for the list of projects.</p>"},{"location":"why/#reasoning","title":"Reasoning","text":"<p>There are so many choices to make nowadays: what backend framework, what build tools, what frontend framework, how to deploy, how to easily develop locally, etc... The development world, and especially the javascript world, moves at a very fast pace. There is a lot of good stuff happening but at the same time it often feels overwhelming.</p> <p>I think the \"SPA everything\" trend has reach its apogee. I never understood why use frontend component frameworks to build blogs as SPA apps. This trend is shifting back, with the rise of SSR in the javascript world.</p> <p>I do not find the direction React Server Components are following appealing. Blurring the line between frontend and backend has been tried before and it often leads to spaghetti code bases that are hard to maintain. It may make sense in Backend For Fronted architectures but I feel it is too complicated for most projects. Furthermore, I feel the backend building experience in javascript has never been great, far from python, php or rails.</p> <p>At the same time, I feel the developer experience is lacking in many areas. There's so many moving parts to learn and manage, it's daunting. It's especially hard for beginners.</p> <p>In the end, I love Python and Flask and want to continue building modern websites with them. Unfortunately, I felt a lot of extensions have become outdated and Flask being minimalist, no large scale frameworks around it. Hyperflask is my attempt to a super-powered Flask-based stack.</p> <p>Hyperflask aims to be the Laravel of the Python world.</p>"},{"location":"why/#acknowledgments","title":"Acknowledgments","text":"<p>Hyperflask is inspired by many:</p> <ul> <li>Ruby on Rails because of their backend-first, one man framework philosophy</li> <li>Astro for their page format, component islands and static content-first approach</li> <li>Jekyll for their content collections</li> <li>htmx for allowing to build web sites with minimal custom js</li> <li>Laravel for the everything included approach</li> <li>and many other open source projects</li> </ul>"},{"location":"components/","title":"Components","text":"<p>Hyperflask includes a rich set of UI components from DaisyUI as well as utility components deeply integrated with Hyperflask.</p>"},{"location":"components/forms/","title":"Forms","text":"<p>Use the <code>Form</code> component with a form object to write the form tag. Use <code>HxForm</code> instead of <code>Form</code> for an HTMX powered form instead.</p> <pre><code>&lt;{Form form action=\"...\"}&gt;\n\n&lt;/{Form}&gt;\n</code></pre> <p>Tip</p> <p>The component will automatically wrap its inner components with a fieldset. Use <code>fieldset=False</code> in the component props to disable.</p> <p>Use <code>FormField</code> components to style fields properly:</p> <pre><code>&lt;{Form form}&gt;\n    &lt;{FieldsetLegend}&gt;Login&lt;/{}&gt;\n\n    &lt;{FormField form.email.email(\"Email\") }/&gt;\n    &lt;{FormField form.password.password(\"Password\") }/&gt;\n\n    &lt;{SubmitButton}&gt;Login&lt;/{}&gt;\n&lt;/{Form}&gt;\n</code></pre>"},{"location":"components/forms/#styling-forms-without-the-form-component","title":"Styling forms without the Form component","text":"<p>Follow the DaisyUI pattern:</p> <pre><code>&lt;{Fieldset}&gt;\n    &lt;{FieldsetLegend}&gt;Login&lt;/{}&gt;\n\n    &lt;{Label}&gt;Email&lt;/{}&gt;\n    &lt;{Input type=\"email\" }/&gt;\n\n    &lt;{Label}&gt;Password&lt;/{}&gt;\n    &lt;{Input type=\"password\" }/&gt;\n\n    &lt;{Button type=\"submit\" color=\"neutral\"}&gt;Login&lt;/{}&gt;\n&lt;/{Fieldset}&gt;\n</code></pre>"},{"location":"components/icons/","title":"Icons","text":"<p>Icons are provided by Bootstrap Icons.</p> <p>Use the <code>Icon</code> component and provide the icon name:</p> <pre><code>&lt;{Icon \"cart\" }/&gt;\n</code></pre>"},{"location":"components/modals/","title":"Modals","text":"<p>Use the <code>Modal</code> component to create an HTML dialog element.</p> <pre><code>&lt;{Button onclick=\"modal1.showModal()\" }&gt;Say hello&lt;/{Button}&gt;\n&lt;{Modal id=\"modal1\"}&gt;\n    &lt;{ModalTitle}&gt;Hello!&lt;/{ModalTitle}&gt;\n    &lt;p&gt;\n        How are you doing today ?\n    &lt;/p&gt;\n    &lt;{ModalActions}&gt;\n        &lt;{Button}&gt;Close&lt;/{Button}&gt;\n    &lt;/{ModalActions}&gt;\n&lt;/{Modal}&gt;\n</code></pre>"},{"location":"components/modals/#pattern-for-modal-components","title":"Pattern for modal components","text":"<p>Create a backend-driven modal that auto opens when called. Uses the built-in hf-modal htmx extension.</p> <p>Example components/SignupModal.jpy:</p> <pre><code>---\nfrom hyperflask import htmx_redirect\n\ndef get():\n    pass\n\ndef post():\n    form = page.form()\n    if form.validate():\n        #\u00a0...\n        return htmx_redirect(\"/\")\n---\n{% form %}\n&lt;{Modal}&gt;\n    &lt;{ModalTitle}&gt;Hello!&lt;/{ModalTitle}&gt;\n    &lt;{ModalForm form}&gt;\n        &lt;{FormField form.email.email(\"Email\") }/&gt;\n        &lt;{FormField form.password.password(\"Password\") }/&gt;\n        &lt;{SubmitButton}&gt;Signup&lt;/{}&gt;\n    &lt;/{ModalForm}&gt;\n&lt;/{Modal}&gt;\n</code></pre> <p>Using <code>&lt;{ModalForm}&gt;</code> ensures that the modal closes on successfull submit. When the <code>action</code> attribute is not provided, the URL of the component is used.</p> <p>Tip</p> <p>You can also use <code>htmx_oob()</code> to update the page instead of redirecting</p> <p>In a page:</p> <pre><code>&lt;{Button hf_modal=url_for('SignupModal')}&gt;Signup&lt;/{}&gt;\n</code></pre>"},{"location":"components/daisyui/","title":"DaisyUI components","text":"<p>List of available components from DaisyUI</p>"},{"location":"components/daisyui/#actions","title":"Actions","text":"Component Description Button Buttons allow the user to take actions or make choices. Dropdown Dropdown can open a menu or any other element when the button is clicked. Modal Modal is used to show a dialog or a box when you click a button. Swap Swap allows you to toggle the visibility of two elements using a checkbox or a class name."},{"location":"components/daisyui/#data-display","title":"Data display","text":"Component Description Accordion Accordion is used for showing and hiding content but only one item can stay open at a time. Avatar Avatars are used to show a thumbnail representation of an individual or business in the interface. AvatarGroup Stack avatars together Badge Badges are used to inform the user of the status of specific data. Card Cards are used to group and display content in a way that is easily readable. ChatBubble Chat bubbles are used to show one line of conversation and all its data, including the author image, author name, time, etc. Countdown Countdown gives you a transition effect when you change a number between 0 to 99. Kbd Kbd is used to display keyboard shortcuts. List List is a vertical layout to display information in rows. Stat Stat is used to show numbers and data in a block. Stats Group multiple Stat components together. Table Table can be used to show a list of data in a table format."},{"location":"components/daisyui/#navigation","title":"Navigation","text":"Component Description Breadcrumbs Breadcrumbs helps users to navigate through the website. Link Link adds the missing underline style to links. Menu Menu is used to display a list of links vertically or horizontally. Navbar Navbar is used to show a navigation bar on the top of the page. Pagination Pagination is a group of buttons that allow the user to navigate between a set of related content. Steps Steps can be used to show a list of steps in a process. Tabs Tabs can be used to show a list of links in a tabbed format."},{"location":"components/daisyui/#feedback","title":"Feedback","text":"Component Description Alert Alert informs users about important events. Loading Loading shows an animation to indicate that something is loading. Progress Progress bar can be used to show the progress of a task or to show the passing of time. Toast Toast is a wrapper to stack elements, positioned on the corner of page. Tooltip Tooltip can be used to show a message when hovering over an element."},{"location":"components/daisyui/#data-input","title":"Data input","text":"Component Description Checkbox Checkboxes are used to select or deselect a value. Fieldset Fieldset is a container for grouping related form elements. It includes fieldset-legend as a title and label as a description. FileInput File Input is a an input field for uploading files. Filter Filter is a group of radio buttons. Choosing one of the options will hide the others and shows a reset button next to the chosen option. Input Text Input is a simple input field. InputLabel Label for input element Label Label is used to provide a name or title for an input field. Label can be placed before or after the field. LabeledCheckbox A checkbox wrapped in a label LabeledToggle A Toggle wrapped in a label Radio Radio buttons allow the user to select one option from a set. Range Range slider is used to select a value by sliding a handle. Rating Rating is a set of radio buttons that allow the user to rate something. Select Select is used to pick a value from a list of options. Textarea Textarea allows users to enter text in multiple lines. Toggle Toggle is a checkbox that is styled to look like a switch button."},{"location":"components/daisyui/#layout","title":"Layout","text":"Component Description Divider Divider will be used to separate content vertically or horizontally. Drawer Drawer is a grid layout that can show/hide a sidebar on the left or right side of the page. Footer Footer can contain logo, copyright notice, and links to other pages. FooterNav Indicator Indicators are used to place an element on the corner of another element. Join Join is a container for grouping multiple items, it can be used to group buttons, inputs, etc. Join applies border radius to the first and last item. Join can be used to create a horizontal or vertical list of items. Stack Stack visually puts elements on top of each other."},{"location":"components/daisyui/Accordion/","title":"Accordion","text":"<p>Accordion is used for showing and hiding content but only one item can stay open at a time.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Accordion/#properties","title":"Properties","text":"Property Required Type Description Any additional properties No any"},{"location":"components/daisyui/Accordion/#children","title":"Children","text":"<p>Accepts children of type:</p> Component Description AccordionPanel"},{"location":"components/daisyui/Accordion/#examples","title":"Examples","text":"<pre><code>&lt;{Accordion}&gt;\n\n&lt;/{Accordion}&gt;\n</code></pre>"},{"location":"components/daisyui/AccordionPanel/","title":"AccordionPanel","text":"<p>Use as part of Accordion to create a panel that can be expanded or collapsed.</p>"},{"location":"components/daisyui/AccordionPanel/#properties","title":"Properties","text":"Property Required Type Description title No str open No bool toggle-icon No str name No str Any additional properties No any"},{"location":"components/daisyui/AccordionPanel/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/AccordionPanel/#examples","title":"Examples","text":"<pre><code>&lt;{AccordionPanel}&gt;\n\n&lt;/{AccordionPanel}&gt;\n</code></pre>"},{"location":"components/daisyui/Alert/","title":"Alert","text":"<p>Alert informs users about important events.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Alert/#properties","title":"Properties","text":"Property Required Type Description color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) soft No bool outline No bool dash No bool Any additional properties No any"},{"location":"components/daisyui/Alert/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/Alert/#examples","title":"Examples","text":"<pre><code>&lt;{Alert}&gt;\n\n&lt;/{Alert}&gt;\n</code></pre>"},{"location":"components/daisyui/Avatar/","title":"Avatar","text":"<p>Avatars are used to show a thumbnail representation of an individual or business in the interface.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Avatar/#properties","title":"Properties","text":"Property Required Type Description src No str placeholder No str placeholder-text-size No str alt No str rounded No bool size No int float mask No str (one of: squircle, heart, hexagon, hexagon-2, decagon, pentagon, diamond, square, circle, star, star-2, triangle, triangle-2, triangle-3, triangle-4, half-1, half-2) presence No str (one of: online, offline) indicator No str indicator-color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) indicator-position-x No str (one of: start, center, end) indicator-position-y No str (one of: top, middle, bottom) Any additional properties No any"},{"location":"components/daisyui/Avatar/#examples","title":"Examples","text":"<pre><code>&lt;{Avatar}/&gt;\n</code></pre>"},{"location":"components/daisyui/AvatarGroup/","title":"AvatarGroup","text":"<p>Stack avatars together</p>"},{"location":"components/daisyui/AvatarGroup/#properties","title":"Properties","text":"Property Required Type Description Any additional properties No any"},{"location":"components/daisyui/AvatarGroup/#children","title":"Children","text":"<p>Accepts children of type:</p> Component Description Avatar"},{"location":"components/daisyui/AvatarGroup/#examples","title":"Examples","text":"<pre><code>&lt;{AvatarGroup}&gt;\n\n&lt;/{AvatarGroup}&gt;\n</code></pre>"},{"location":"components/daisyui/Badge/","title":"Badge","text":"<p>Badges are used to inform the user of the status of specific data.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Badge/#properties","title":"Properties","text":"Property Required Type Description color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) size No str (one of: xs, sm, md, lg, xl) soft No bool outline No bool dash No bool ghost No bool Any additional properties No any"},{"location":"components/daisyui/Badge/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/Badge/#examples","title":"Examples","text":"<pre><code>&lt;{Badge}&gt;\n\n&lt;/{Badge}&gt;\n</code></pre>"},{"location":"components/daisyui/Breadcrumbs/","title":"Breadcrumbs","text":"<p>Breadcrumbs helps users to navigate through the website.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Breadcrumbs/#properties","title":"Properties","text":"Property Required Type Description Any additional properties No any"},{"location":"components/daisyui/Breadcrumbs/#children","title":"Children","text":"<p>Accepts children of type:</p> Component Description BreadcrumbsItem Use as part of Breadcrumbs to create a breadcrumb item."},{"location":"components/daisyui/Breadcrumbs/#examples","title":"Examples","text":"<pre><code>&lt;{Breadcrumbs}&gt;\n\n&lt;/{Breadcrumbs}&gt;\n</code></pre>"},{"location":"components/daisyui/BreadcrumbsItem/","title":"BreadcrumbsItem","text":"<p>Use as part of Breadcrumbs to create a breadcrumb item.</p>"},{"location":"components/daisyui/BreadcrumbsItem/#properties","title":"Properties","text":"Property Required Type Description Any additional properties No any"},{"location":"components/daisyui/BreadcrumbsItem/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/BreadcrumbsItem/#examples","title":"Examples","text":"<pre><code>&lt;{BreadcrumbsItem}&gt;\n\n&lt;/{BreadcrumbsItem}&gt;\n</code></pre>"},{"location":"components/daisyui/Button/","title":"Button","text":"<p>Buttons allow the user to take actions or make choices.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Button/#properties","title":"Properties","text":"Property Required Type Description color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) active No bool outline No bool size No str (one of: xs, sm, md, lg, xl) wide No bool block No bool shape No str (one of: square, circle) join No bool as No bool Any additional properties No any"},{"location":"components/daisyui/Button/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/Button/#examples","title":"Examples","text":"<pre><code>&lt;{Button}&gt;\n\n&lt;/{Button}&gt;\n</code></pre>"},{"location":"components/daisyui/Card/","title":"Card","text":"<p>Cards are used to group and display content in a way that is easily readable.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Card/#properties","title":"Properties","text":"Property Required Type Description image No str image-alt No str image-full No bool image-on-side No bool title No str size No str (one of: xs, sm, md, lg, xl) Any additional properties No any"},{"location":"components/daisyui/Card/#children","title":"Children","text":"<p>Accepts children of type:</p> Component Description CardTitle CardActions"},{"location":"components/daisyui/Card/#examples","title":"Examples","text":"<pre><code>&lt;{Card}&gt;\n\n&lt;/{Card}&gt;\n</code></pre>"},{"location":"components/daisyui/CardActions/","title":"CardActions","text":"<p>Use as part of Card to create a section for actions or buttons at the bottom of the card.</p>"},{"location":"components/daisyui/CardActions/#properties","title":"Properties","text":"Property Required Type Description Any additional properties No any"},{"location":"components/daisyui/CardActions/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/CardActions/#examples","title":"Examples","text":"<pre><code>&lt;{CardActions}&gt;\n\n&lt;/{CardActions}&gt;\n</code></pre>"},{"location":"components/daisyui/CardTitle/","title":"CardTitle","text":"<p>Use as part of Card to display the title of the card.</p>"},{"location":"components/daisyui/CardTitle/#properties","title":"Properties","text":"Property Required Type Description Any additional properties No any"},{"location":"components/daisyui/CardTitle/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/CardTitle/#examples","title":"Examples","text":"<pre><code>&lt;{CardTitle}&gt;\n\n&lt;/{CardTitle}&gt;\n</code></pre>"},{"location":"components/daisyui/ChatBubble/","title":"ChatBubble","text":"<p>Chat bubbles are used to show one line of conversation and all its data, including the author image, author name, time, etc.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/ChatBubble/#properties","title":"Properties","text":"Property Required Type Description reply No bool avatar No str avatar-alt No str header No str footer No str color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) Any additional properties No any"},{"location":"components/daisyui/ChatBubble/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/ChatBubble/#examples","title":"Examples","text":"<pre><code>&lt;{ChatBubble}&gt;\n\n&lt;/{ChatBubble}&gt;\n</code></pre>"},{"location":"components/daisyui/Checkbox/","title":"Checkbox","text":"<p>Checkboxes are used to select or deselect a value.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Checkbox/#properties","title":"Properties","text":"Property Required Type Description color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) size No str (one of: xs, sm, md, lg, xl) validator No bool validator-hint No str Any additional properties No any"},{"location":"components/daisyui/Checkbox/#examples","title":"Examples","text":"<pre><code>&lt;{Checkbox}/&gt;\n</code></pre>"},{"location":"components/daisyui/CollapsibleSubMenu/","title":"CollapsibleSubMenu","text":""},{"location":"components/daisyui/CollapsibleSubMenu/#properties","title":"Properties","text":"Property Required Type Description label Yes str open No bool Any additional properties No any"},{"location":"components/daisyui/CollapsibleSubMenu/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/CollapsibleSubMenu/#examples","title":"Examples","text":"<pre><code>&lt;{CollapsibleSubMenu}&gt;\n\n&lt;/{CollapsibleSubMenu}&gt;\n</code></pre>"},{"location":"components/daisyui/Countdown/","title":"Countdown","text":"<p>Countdown gives you a transition effect when you change a number between 0 to 99.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Countdown/#properties","title":"Properties","text":"Property Required Type Description value No str Any additional properties No any"},{"location":"components/daisyui/Countdown/#examples","title":"Examples","text":"<pre><code>&lt;{Countdown}/&gt;\n</code></pre>"},{"location":"components/daisyui/Divider/","title":"Divider","text":"<p>Divider will be used to separate content vertically or horizontally.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Divider/#properties","title":"Properties","text":"Property Required Type Description horizontal No bool responsive No str (one of: xs, sm, md, lg, xl) color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) text-placement No str (one of: start, end) Any additional properties No any"},{"location":"components/daisyui/Divider/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/Divider/#examples","title":"Examples","text":"<pre><code>&lt;{Divider}&gt;\n\n&lt;/{Divider}&gt;\n</code></pre>"},{"location":"components/daisyui/Drawer/","title":"Drawer","text":"<p>Drawer is a grid layout that can show/hide a sidebar on the left or right side of the page.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Drawer/#properties","title":"Properties","text":"Property Required Type Description id No str open No bool responsive No str (one of: xs, sm, md, lg, xl) end No bool Any additional properties No any"},{"location":"components/daisyui/Drawer/#children","title":"Children","text":"<p>Accepts children of type:</p> Component Description DrawerContent DrawerSide"},{"location":"components/daisyui/Drawer/#examples","title":"Examples","text":"<p>Navbar menu for desktop + sidebar drawer for mobile</p> <pre><code>&lt;{Drawer id=\"drawer1\"}&gt;\n  &lt;{DrawerContent}&gt;\n    &lt;{Navbar sidebar_toggle=\"drawer1\" sidebar_toggle_responsive=\"lg\"}/&gt;\n  &lt;/{DrawerContent}&gt;\n  &lt;{DrawerSide id=\"drawer1\"}&gt;\n    &lt;{Menu}/&gt;\n  &lt;/{DrawerSide}&gt;\n&lt;/{Drawer}&gt;\n</code></pre>"},{"location":"components/daisyui/DrawerContent/","title":"DrawerContent","text":""},{"location":"components/daisyui/DrawerContent/#properties","title":"Properties","text":"Property Required Type Description Any additional properties No any"},{"location":"components/daisyui/DrawerContent/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/DrawerContent/#examples","title":"Examples","text":"<pre><code>&lt;{DrawerContent}&gt;\n\n&lt;/{DrawerContent}&gt;\n</code></pre>"},{"location":"components/daisyui/DrawerSide/","title":"DrawerSide","text":""},{"location":"components/daisyui/DrawerSide/#properties","title":"Properties","text":"Property Required Type Description id No str Any additional properties No any"},{"location":"components/daisyui/DrawerSide/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/DrawerSide/#examples","title":"Examples","text":"<pre><code>&lt;{DrawerSide}&gt;\n\n&lt;/{DrawerSide}&gt;\n</code></pre>"},{"location":"components/daisyui/Dropdown/","title":"Dropdown","text":"<p>Dropdown can open a menu or any other element when the button is clicked.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Dropdown/#properties","title":"Properties","text":"Property Required Type Description label Yes str Any additional properties No any"},{"location":"components/daisyui/Dropdown/#children","title":"Children","text":"<p>Accepts children of type:</p> Component Description DropdownItem Use DropdownItem to create a clickable item in the dropdown."},{"location":"components/daisyui/Dropdown/#examples","title":"Examples","text":"<p>Simple dropdown</p> <pre><code>&lt;{Dropdown}&gt;\n  &lt;{DropdownItem href=\"/page1\"}&gt;\n    Item 1\n  &lt;/{DropdownItem}&gt;\n  &lt;{DropdownItem href=\"/page2\"}&gt;\n    Item 2\n  &lt;/{DropdownItem}&gt;\n&lt;/{Dropdown}&gt;\n</code></pre>"},{"location":"components/daisyui/DropdownItem/","title":"DropdownItem","text":"<p>Use as part of Dropdown to create an item in the dropdown menu.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/DropdownItem/#properties","title":"Properties","text":"Property Required Type Description Any additional properties No any Unknown props will be used as attributes on the a element"},{"location":"components/daisyui/DropdownItem/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/DropdownItem/#examples","title":"Examples","text":"<pre><code>&lt;{DropdownItem}&gt;\n\n&lt;/{DropdownItem}&gt;\n</code></pre>"},{"location":"components/daisyui/Fieldset/","title":"Fieldset","text":"<p>Fieldset is a container for grouping related form elements. It includes fieldset-legend as a title and label as a description.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Fieldset/#properties","title":"Properties","text":"Property Required Type Description Any additional properties No any"},{"location":"components/daisyui/Fieldset/#children","title":"Children","text":"<p>Accepts children of type:</p> Component Description FieldsetLegend"},{"location":"components/daisyui/Fieldset/#examples","title":"Examples","text":"<pre><code>&lt;{Fieldset}&gt;\n\n&lt;/{Fieldset}&gt;\n</code></pre>"},{"location":"components/daisyui/FieldsetLegend/","title":"FieldsetLegend","text":""},{"location":"components/daisyui/FieldsetLegend/#properties","title":"Properties","text":"Property Required Type Description Any additional properties No any"},{"location":"components/daisyui/FieldsetLegend/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/FieldsetLegend/#examples","title":"Examples","text":"<pre><code>&lt;{FieldsetLegend}&gt;\n\n&lt;/{FieldsetLegend}&gt;\n</code></pre>"},{"location":"components/daisyui/FileInput/","title":"FileInput","text":"<p>File Input is a an input field for uploading files.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/FileInput/#properties","title":"Properties","text":"Property Required Type Description color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) size No str (one of: xs, sm, md, lg, xl) ghost No bool Any additional properties No any"},{"location":"components/daisyui/FileInput/#examples","title":"Examples","text":"<pre><code>&lt;{FileInput}/&gt;\n</code></pre>"},{"location":"components/daisyui/Filter/","title":"Filter","text":"<p>Filter is a group of radio buttons. Choosing one of the options will hide the others and shows a reset button next to the chosen option.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Filter/#properties","title":"Properties","text":"Property Required Type Description name Yes str reset-label No str color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) size No str (one of: xs, sm, md, lg, xl) Any additional properties No any"},{"location":"components/daisyui/Filter/#children","title":"Children","text":"<p>Accepts children of type:</p> Component Description FilterItem"},{"location":"components/daisyui/Filter/#examples","title":"Examples","text":"<pre><code>&lt;{Filter}&gt;\n\n&lt;/{Filter}&gt;\n</code></pre>"},{"location":"components/daisyui/FilterItem/","title":"FilterItem","text":""},{"location":"components/daisyui/FilterItem/#properties","title":"Properties","text":"Property Required Type Description name Yes str label Yes str color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) size No str (one of: xs, sm, md, lg, xl) Any additional properties No any"},{"location":"components/daisyui/FilterItem/#examples","title":"Examples","text":"<pre><code>&lt;{FilterItem}/&gt;\n</code></pre>"},{"location":"components/daisyui/Footer/","title":"Footer","text":"<p>Footer can contain logo, copyright notice, and links to other pages.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Footer/#properties","title":"Properties","text":"Property Required Type Description center No bool rows No str Any additional properties No any"},{"location":"components/daisyui/Footer/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/Footer/#examples","title":"Examples","text":"<pre><code>&lt;{Footer}&gt;\n\n&lt;/{Footer}&gt;\n</code></pre>"},{"location":"components/daisyui/FooterLink/","title":"FooterLink","text":""},{"location":"components/daisyui/FooterLink/#properties","title":"Properties","text":"Property Required Type Description Any additional properties No any"},{"location":"components/daisyui/FooterLink/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/FooterLink/#examples","title":"Examples","text":"<pre><code>&lt;{FooterLink}&gt;\n\n&lt;/{FooterLink}&gt;\n</code></pre>"},{"location":"components/daisyui/FooterNav/","title":"FooterNav","text":""},{"location":"components/daisyui/FooterNav/#properties","title":"Properties","text":"Property Required Type Description title No str Any additional properties No any"},{"location":"components/daisyui/FooterNav/#children","title":"Children","text":"<p>Accepts children of type:</p> Component Description FooterLink"},{"location":"components/daisyui/FooterNav/#examples","title":"Examples","text":"<pre><code>&lt;{FooterNav}&gt;\n\n&lt;/{FooterNav}&gt;\n</code></pre>"},{"location":"components/daisyui/Indicator/","title":"Indicator","text":"<p>Indicators are used to place an element on the corner of another element.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Indicator/#properties","title":"Properties","text":"Property Required Type Description value No str color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) size No str (one of: xs, sm, md, lg, xl) outline No bool position No str (one of: start, center, end, top, middle, bottom) Any additional properties No any"},{"location":"components/daisyui/Indicator/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/Indicator/#examples","title":"Examples","text":"<pre><code>&lt;{Indicator}&gt;\n\n&lt;/{Indicator}&gt;\n</code></pre>"},{"location":"components/daisyui/Input/","title":"Input","text":"<p>Text Input is a simple input field.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Input/#properties","title":"Properties","text":"Property Required Type Description color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) size No str (one of: xs, sm, md, lg, xl) ghost No bool type No str join No bool validator No bool validator-hint No str Any additional properties No any"},{"location":"components/daisyui/Input/#examples","title":"Examples","text":"<pre><code>&lt;{Input}/&gt;\n</code></pre>"},{"location":"components/daisyui/InputLabel/","title":"InputLabel","text":"<p>Label for input element</p>"},{"location":"components/daisyui/InputLabel/#properties","title":"Properties","text":"Property Required Type Description label No str floating No bool Any additional properties No any"},{"location":"components/daisyui/InputLabel/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/InputLabel/#examples","title":"Examples","text":"<pre><code>&lt;{InputLabel}&gt;\n\n&lt;/{InputLabel}&gt;\n</code></pre>"},{"location":"components/daisyui/Join/","title":"Join","text":"<p>Join is a container for grouping multiple items, it can be used to group buttons, inputs, etc. Join applies border radius to the first and last item. Join can be used to create a horizontal or vertical list of items.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Join/#properties","title":"Properties","text":"Property Required Type Description vertical No bool Any additional properties No any"},{"location":"components/daisyui/Join/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/Join/#examples","title":"Examples","text":"<pre><code>&lt;{Join}&gt;\n\n&lt;/{Join}&gt;\n</code></pre>"},{"location":"components/daisyui/Kbd/","title":"Kbd","text":"<p>Kbd is used to display keyboard shortcuts.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Kbd/#properties","title":"Properties","text":"Property Required Type Description size No str (one of: xs, sm, md, lg, xl) Any additional properties No any"},{"location":"components/daisyui/Kbd/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/Kbd/#examples","title":"Examples","text":"<pre><code>&lt;{Kbd}&gt;\n\n&lt;/{Kbd}&gt;\n</code></pre>"},{"location":"components/daisyui/Label/","title":"Label","text":"<p>Label is used to provide a name or title for an input field. Label can be placed before or after the field.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Label/#properties","title":"Properties","text":"Property Required Type Description Any additional properties No any"},{"location":"components/daisyui/Label/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/Label/#examples","title":"Examples","text":"<pre><code>&lt;{Label}&gt;\n\n&lt;/{Label}&gt;\n</code></pre>"},{"location":"components/daisyui/LabeledCheckbox/","title":"LabeledCheckbox","text":"<p>A checkbox wrapped in a label</p>"},{"location":"components/daisyui/LabeledCheckbox/#properties","title":"Properties","text":"Property Required Type Description style No str (one of: primary, secondary, accent, neutral, success, warning, info, error) size No str (one of: xs, sm, md, lg, xl) Any additional properties No any"},{"location":"components/daisyui/LabeledCheckbox/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/LabeledCheckbox/#examples","title":"Examples","text":"<pre><code>&lt;{LabeledCheckbox}&gt;\n\n&lt;/{LabeledCheckbox}&gt;\n</code></pre>"},{"location":"components/daisyui/LabeledToggle/","title":"LabeledToggle","text":"<p>A Toggle wrapped in a label</p>"},{"location":"components/daisyui/LabeledToggle/#properties","title":"Properties","text":"Property Required Type Description color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) size No str (one of: xs, sm, md, lg, xl) Any additional properties No any"},{"location":"components/daisyui/LabeledToggle/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/LabeledToggle/#examples","title":"Examples","text":"<pre><code>&lt;{LabeledToggle}&gt;\n\n&lt;/{LabeledToggle}&gt;\n</code></pre>"},{"location":"components/daisyui/Link/","title":"Link","text":"<p>Link adds the missing underline style to links.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Link/#properties","title":"Properties","text":"Property Required Type Description color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) hover No bool Any additional properties No any"},{"location":"components/daisyui/Link/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/Link/#examples","title":"Examples","text":"<pre><code>&lt;{Link}&gt;\n\n&lt;/{Link}&gt;\n</code></pre>"},{"location":"components/daisyui/List/","title":"List","text":"<p>List is a vertical layout to display information in rows.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/List/#properties","title":"Properties","text":"Property Required Type Description Any additional properties No any"},{"location":"components/daisyui/List/#children","title":"Children","text":"<p>Accepts children of type:</p> Component Description ListItem"},{"location":"components/daisyui/List/#examples","title":"Examples","text":"<pre><code>&lt;{List}&gt;\n\n&lt;/{List}&gt;\n</code></pre>"},{"location":"components/daisyui/ListItem/","title":"ListItem","text":"<p>Use as part of List to create a list item.</p>"},{"location":"components/daisyui/ListItem/#properties","title":"Properties","text":"Property Required Type Description Any additional properties No any"},{"location":"components/daisyui/ListItem/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/ListItem/#examples","title":"Examples","text":"<pre><code>&lt;{ListItem}&gt;\n\n&lt;/{ListItem}&gt;\n</code></pre>"},{"location":"components/daisyui/Loading/","title":"Loading","text":"<p>Loading shows an animation to indicate that something is loading.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Loading/#properties","title":"Properties","text":"Property Required Type Description style No str (one of: spinner, dots, ring, ball, bars, infinity) size No str (one of: xs, sm, md, lg, xl) color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) Any additional properties No any"},{"location":"components/daisyui/Loading/#examples","title":"Examples","text":"<pre><code>&lt;{Loading}/&gt;\n</code></pre>"},{"location":"components/daisyui/Menu/","title":"Menu","text":"<p>Menu is used to display a list of links vertically or horizontally.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Menu/#properties","title":"Properties","text":"Property Required Type Description horitzontal No bool size No str (one of: xs, sm, md, lg, xl) Any additional properties No any"},{"location":"components/daisyui/Menu/#children","title":"Children","text":"<p>Accepts children of type:</p> Component Description MenuItem Use MenuItem to create a clickable item in the menu. MenuTitle Use MenuTitle to create a title for a section in the menu. SubMenu Use SubMenu to create a nested menu with a title and items. CollapsibleSubMenu Use CollapsibleSubMenu to create a nested menu that can be expanded or collapsed."},{"location":"components/daisyui/Menu/#examples","title":"Examples","text":"<p>Simple menu</p> <pre><code>&lt;{Menu}&gt;\n  &lt;{MenuItem}&gt;\n    Item 1\n  &lt;/{MenuItem}&gt;\n  &lt;{MenuItem}&gt;\n    Item 2\n  &lt;/{MenuItem}&gt;\n&lt;/{Menu}&gt;\n</code></pre> <p>Simple menu with title</p> <pre><code>&lt;{Menu}&gt;\n  &lt;{MenuTitle}&gt;\n    My menu\n  &lt;/{MenuTitle}&gt;\n  &lt;{MenuItem}&gt;\n    Item 1\n  &lt;/{MenuItem}&gt;\n&lt;/{Menu}&gt;\n</code></pre> <p>With submenu</p> <pre><code>&lt;{Menu}&gt;\n  &lt;{MenuItem}&gt;\n    Item 1\n  &lt;/{MenuItem}&gt;\n  &lt;{SubMenu label=\"Parent\"}&gt;\n    &lt;{MenuItem}&gt;\n      Child 1\n    &lt;/{MenuItem}&gt;\n    &lt;{MenuItem}&gt;\n      Child 2\n    &lt;/{MenuItem}&gt;\n  &lt;/{SubMenu}&gt;\n&lt;/{Menu}&gt;\n</code></pre>"},{"location":"components/daisyui/MenuItem/","title":"MenuItem","text":"<p>Use as part of Menu to create a menu item.</p>"},{"location":"components/daisyui/MenuItem/#properties","title":"Properties","text":"Property Required Type Description active No bool tooltip No str disabled No bool Any additional properties No any"},{"location":"components/daisyui/MenuItem/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/MenuItem/#examples","title":"Examples","text":"<pre><code>&lt;{MenuItem href=\"/page1\"}&gt;\n\n&lt;/{MenuItem}&gt;\n</code></pre>"},{"location":"components/daisyui/MenuTitle/","title":"MenuTitle","text":""},{"location":"components/daisyui/MenuTitle/#properties","title":"Properties","text":"Property Required Type Description Any additional properties No any"},{"location":"components/daisyui/MenuTitle/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/MenuTitle/#examples","title":"Examples","text":"<pre><code>&lt;{MenuTitle}&gt;\n\n&lt;/{MenuTitle}&gt;\n</code></pre>"},{"location":"components/daisyui/Modal/","title":"Modal","text":"<p>Modal is used to show a dialog or a box when you click a button.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Modal/#properties","title":"Properties","text":"Property Required Type Description close-btn No bool open No bool position-x No str (one of: start, end) position-y No str (one of: top, middle, bottom) responsive No bool width No str large No bool no-blur No bool Any additional properties No any"},{"location":"components/daisyui/Modal/#children","title":"Children","text":"<p>Accepts children of type:</p> Component Description ModalAction ModalTitle"},{"location":"components/daisyui/Modal/#examples","title":"Examples","text":"<pre><code>&lt;{Modal}&gt;\n\n&lt;/{Modal}&gt;\n</code></pre>"},{"location":"components/daisyui/ModalAction/","title":"ModalAction","text":"<p>Use as part of Modal to add actions or buttons at the bottom of the modal.</p>"},{"location":"components/daisyui/ModalAction/#properties","title":"Properties","text":"Property Required Type Description Any additional properties No any"},{"location":"components/daisyui/ModalAction/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/ModalAction/#examples","title":"Examples","text":"<pre><code>&lt;{ModalAction}&gt;\n\n&lt;/{ModalAction}&gt;\n</code></pre>"},{"location":"components/daisyui/ModalTitle/","title":"ModalTitle","text":"<p>Use as part of Modal to display the title of the modal dialog.</p>"},{"location":"components/daisyui/ModalTitle/#properties","title":"Properties","text":"Property Required Type Description Any additional properties No any"},{"location":"components/daisyui/ModalTitle/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/ModalTitle/#examples","title":"Examples","text":"<pre><code>&lt;{ModalTitle}&gt;\n\n&lt;/{ModalTitle}&gt;\n</code></pre>"},{"location":"components/daisyui/Navbar/","title":"Navbar","text":"<p>Navbar is used to show a navigation bar on the top of the page.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Navbar/#properties","title":"Properties","text":"Property Required Type Description title Yes str title-href No str color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) sidebar-toggle No str sidebar-toggle-responsive No str (one of: xs, sm, md, lg, xl) Any additional properties No any"},{"location":"components/daisyui/Navbar/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/Navbar/#examples","title":"Examples","text":"<pre><code>&lt;{Navbar}&gt;\n\n&lt;/{Navbar}&gt;\n</code></pre>"},{"location":"components/daisyui/Pagination/","title":"Pagination","text":"<p>Pagination is a group of buttons that allow the user to navigate between a set of related content.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Pagination/#properties","title":"Properties","text":"Property Required Type Description Any additional properties No any"},{"location":"components/daisyui/Pagination/#children","title":"Children","text":"<p>Accepts children of type:</p> Component Description PaginationPage PaginationPrev PaginationNext"},{"location":"components/daisyui/Pagination/#examples","title":"Examples","text":"<pre><code>&lt;{Pagination}&gt;\n  &lt;{PaginationPrev href=\"/page1\"}/&gt;\n  &lt;{PaginationPage href=\"/page1\"}&gt;\n    1\n  &lt;/{PaginationPage}&gt;\n  &lt;{PaginationPage href=\"/page2\" active=True}&gt;\n    2\n  &lt;/{PaginationPage}&gt;\n  &lt;{PaginationPage href=\"/page3\"}&gt;\n    3\n  &lt;/{PaginationPage}&gt;\n  &lt;{PaginationNext href=\"/page3\"}/&gt;\n&lt;/{Pagination}&gt;\n</code></pre>"},{"location":"components/daisyui/PaginationNext/","title":"PaginationNext","text":""},{"location":"components/daisyui/PaginationNext/#properties","title":"Properties","text":"Property Required Type Description Any additional properties No any"},{"location":"components/daisyui/PaginationNext/#examples","title":"Examples","text":"<pre><code>&lt;{PaginationNext}/&gt;\n</code></pre>"},{"location":"components/daisyui/PaginationPage/","title":"PaginationPage","text":""},{"location":"components/daisyui/PaginationPage/#properties","title":"Properties","text":"Property Required Type Description active No bool Any additional properties No any"},{"location":"components/daisyui/PaginationPage/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/PaginationPage/#examples","title":"Examples","text":"<pre><code>&lt;{PaginationPage}&gt;\n\n&lt;/{PaginationPage}&gt;\n</code></pre>"},{"location":"components/daisyui/PaginationPrev/","title":"PaginationPrev","text":""},{"location":"components/daisyui/PaginationPrev/#properties","title":"Properties","text":"Property Required Type Description Any additional properties No any"},{"location":"components/daisyui/PaginationPrev/#examples","title":"Examples","text":"<pre><code>&lt;{PaginationPrev}/&gt;\n</code></pre>"},{"location":"components/daisyui/Progress/","title":"Progress","text":"<p>Progress bar can be used to show the progress of a task or to show the passing of time.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Progress/#properties","title":"Properties","text":"Property Required Type Description Any additional properties No any"},{"location":"components/daisyui/Progress/#examples","title":"Examples","text":"<pre><code>&lt;{Progress}/&gt;\n</code></pre>"},{"location":"components/daisyui/Radio/","title":"Radio","text":"<p>Radio buttons allow the user to select one option from a set.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Radio/#properties","title":"Properties","text":"Property Required Type Description color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) size No str (one of: xs, sm, md, lg, xl) Any additional properties No any"},{"location":"components/daisyui/Radio/#examples","title":"Examples","text":"<pre><code>&lt;{Radio}/&gt;\n</code></pre>"},{"location":"components/daisyui/Range/","title":"Range","text":"<p>Range slider is used to select a value by sliding a handle.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Range/#properties","title":"Properties","text":"Property Required Type Description color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) size No str (one of: xs, sm, md, lg, xl) Any additional properties No any"},{"location":"components/daisyui/Range/#examples","title":"Examples","text":"<pre><code>&lt;{Range}/&gt;\n</code></pre>"},{"location":"components/daisyui/Rating/","title":"Rating","text":"<p>Rating is a set of radio buttons that allow the user to rate something.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Rating/#properties","title":"Properties","text":"Property Required Type Description name No str rating No bool mask No str color No str size No str (one of: xs, sm, md, lg, xl) readonly No bool clearable No bool Any additional properties No any"},{"location":"components/daisyui/Rating/#examples","title":"Examples","text":"<pre><code>&lt;{Rating}/&gt;\n</code></pre>"},{"location":"components/daisyui/Select/","title":"Select","text":"<p>Select is used to pick a value from a list of options.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Select/#properties","title":"Properties","text":"Property Required Type Description color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) size No str (one of: xs, sm, md, lg, xl) ghost No bool placeholder No str join No bool validator No bool validator-hint No str Any additional properties No any"},{"location":"components/daisyui/Select/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/Select/#examples","title":"Examples","text":"<pre><code>&lt;{Select}&gt;\n\n&lt;/{Select}&gt;\n</code></pre>"},{"location":"components/daisyui/Stack/","title":"Stack","text":"<p>Stack visually puts elements on top of each other.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Stack/#properties","title":"Properties","text":"Property Required Type Description align No str (one of: top, bottom, start, end) Any additional properties No any"},{"location":"components/daisyui/Stack/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/Stack/#examples","title":"Examples","text":"<pre><code>&lt;{Stack}&gt;\n\n&lt;/{Stack}&gt;\n</code></pre>"},{"location":"components/daisyui/Stat/","title":"Stat","text":"<p>Stat is used to show numbers and data in a block.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Stat/#properties","title":"Properties","text":"Property Required Type Description title Yes str value Yes str desc No str color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) Any additional properties No any"},{"location":"components/daisyui/Stat/#examples","title":"Examples","text":"<pre><code>&lt;{Stat}/&gt;\n</code></pre>"},{"location":"components/daisyui/Stats/","title":"Stats","text":"<p>Group multiple Stat components together.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Stats/#properties","title":"Properties","text":"Property Required Type Description vertical No bool Any additional properties No any"},{"location":"components/daisyui/Stats/#children","title":"Children","text":"<p>Accepts children of type:</p> Component Description Stat"},{"location":"components/daisyui/Stats/#examples","title":"Examples","text":"<pre><code>&lt;{Stats}&gt;\n\n&lt;/{Stats}&gt;\n</code></pre>"},{"location":"components/daisyui/Step/","title":"Step","text":""},{"location":"components/daisyui/Step/#properties","title":"Properties","text":"Property Required Type Description completed No str completed-color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) icon No str Any additional properties No any"},{"location":"components/daisyui/Step/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/Step/#examples","title":"Examples","text":"<pre><code>&lt;{Step}&gt;\n\n&lt;/{Step}&gt;\n</code></pre>"},{"location":"components/daisyui/Steps/","title":"Steps","text":"<p>Steps can be used to show a list of steps in a process.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Steps/#properties","title":"Properties","text":"Property Required Type Description vertical No bool Any additional properties No any"},{"location":"components/daisyui/Steps/#children","title":"Children","text":"<p>Accepts children of type:</p> Component Description Step"},{"location":"components/daisyui/Steps/#examples","title":"Examples","text":"<pre><code>&lt;{Steps}&gt;\n\n&lt;/{Steps}&gt;\n</code></pre>"},{"location":"components/daisyui/SubMenu/","title":"SubMenu","text":""},{"location":"components/daisyui/SubMenu/#properties","title":"Properties","text":"Property Required Type Description label No str href No str Any additional properties No any"},{"location":"components/daisyui/SubMenu/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/SubMenu/#examples","title":"Examples","text":"<pre><code>&lt;{SubMenu}&gt;\n\n&lt;/{SubMenu}&gt;\n</code></pre>"},{"location":"components/daisyui/Swap/","title":"Swap","text":"<p>Swap allows you to toggle the visibility of two elements using a checkbox or a class name.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Swap/#properties","title":"Properties","text":"Property Required Type Description rotate No bool Any additional properties No any"},{"location":"components/daisyui/Swap/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/Swap/#examples","title":"Examples","text":"<pre><code>&lt;{Swap}&gt;\n\n&lt;/{Swap}&gt;\n</code></pre>"},{"location":"components/daisyui/Tab/","title":"Tab","text":""},{"location":"components/daisyui/Tab/#properties","title":"Properties","text":"Property Required Type Description label Yes str name No str Any additional properties No any"},{"location":"components/daisyui/Tab/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/Tab/#examples","title":"Examples","text":"<pre><code>&lt;{Tab}&gt;\n\n&lt;/{Tab}&gt;\n</code></pre>"},{"location":"components/daisyui/Table/","title":"Table","text":"<p>Table can be used to show a list of data in a table format.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Table/#properties","title":"Properties","text":"Property Required Type Description zebra No bool pin-rows No bool pin-cols No bool size No str (one of: xs, sm, md, lg, xl) Any additional properties No any"},{"location":"components/daisyui/Table/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/Table/#examples","title":"Examples","text":"<pre><code>&lt;{Table}&gt;\n\n&lt;/{Table}&gt;\n</code></pre>"},{"location":"components/daisyui/Tabs/","title":"Tabs","text":"<p>Tabs can be used to show a list of links in a tabbed format.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Tabs/#properties","title":"Properties","text":"Property Required Type Description style No str (one of: box, border, lift) size No str (one of: xs, sm, md, lg, xl) Any additional properties No any"},{"location":"components/daisyui/Tabs/#children","title":"Children","text":"<p>Accepts children of type:</p> Component Description Tab"},{"location":"components/daisyui/Tabs/#examples","title":"Examples","text":"<pre><code>&lt;{Tabs}&gt;\n  &lt;{Tab label=\"Tab 1\"}&gt;\n    Content for tab 1\n  &lt;/{Tab}&gt;\n  &lt;{Tab label=\"Tab 2\"}&gt;\n    Content for tab 2\n  &lt;/{Tab}&gt;\n&lt;/{Tabs}&gt;\n</code></pre>"},{"location":"components/daisyui/Textarea/","title":"Textarea","text":"<p>Textarea allows users to enter text in multiple lines.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Textarea/#properties","title":"Properties","text":"Property Required Type Description color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) size No str (one of: xs, sm, md, lg, xl) ghost No bool Any additional properties No any"},{"location":"components/daisyui/Textarea/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/Textarea/#examples","title":"Examples","text":"<pre><code>&lt;{Textarea}&gt;\n\n&lt;/{Textarea}&gt;\n</code></pre>"},{"location":"components/daisyui/Toast/","title":"Toast","text":"<p>Toast is a wrapper to stack elements, positioned on the corner of page.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Toast/#properties","title":"Properties","text":"Property Required Type Description x No str (one of: start, center, end) y No str (one of: top, middle, bottom) Any additional properties No any"},{"location":"components/daisyui/Toast/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/Toast/#examples","title":"Examples","text":"<pre><code>&lt;{Toast}&gt;\n\n&lt;/{Toast}&gt;\n</code></pre>"},{"location":"components/daisyui/Toggle/","title":"Toggle","text":"<p>Toggle is a checkbox that is styled to look like a switch button.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Toggle/#properties","title":"Properties","text":"Property Required Type Description color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) size No str (one of: xs, sm, md, lg, xl) Any additional properties No any"},{"location":"components/daisyui/Toggle/#examples","title":"Examples","text":"<pre><code>&lt;{Toggle}/&gt;\n</code></pre>"},{"location":"components/daisyui/Tooltip/","title":"Tooltip","text":"<p>Tooltip can be used to show a message when hovering over an element.</p> <p>Link to DaisyUI documentation</p>"},{"location":"components/daisyui/Tooltip/#properties","title":"Properties","text":"Property Required Type Description label Yes str placement No str (one of: top, bottom, left, right) open No bool color No str (one of: primary, secondary, accent, neutral, success, warning, info, error) Any additional properties No any"},{"location":"components/daisyui/Tooltip/#children","title":"Children","text":"<p>Accepts any HTML content</p>"},{"location":"components/daisyui/Tooltip/#examples","title":"Examples","text":"<pre><code>&lt;{Tooltip}&gt;\n\n&lt;/{Tooltip}&gt;\n</code></pre>"},{"location":"guides/api/","title":"Building an API","text":""},{"location":"guides/assets/","title":"Assets","text":"<p>Hyperflask integrates esbuild to bundle assets and tailwind for styles.</p> <p>Info</p> <p>This feature is provided by Flask-Assets-Pipeline</p>"},{"location":"guides/assets/#static-assets","title":"Static assets","text":"<p>Static assets can be located in 2 different folders:</p> <ul> <li>app/assets: files located here will be copied to the public folder when the app is built. A hash will be appended to the filename for cache busting. URLs for these files should be created using <code>asset_url(filename)</code></li> <li>public: files located here are left untouched and are directly accessible from the web. URLs for these files should be created using <code>static_url(filename)</code></li> </ul>"},{"location":"guides/assets/#embedded-scripts-and-styles","title":"Embedded scripts and styles","text":"<p>You can define scripts and styles directly in your templates. Their content will be extracted and bundled automatically.</p> <p>Add the <code>bundle</code> attribute to your script and style tags to extract and bundle them.</p> <p>Example components/Datatable.html template:</p> <pre><code>&lt;table class=\"datatable\"&gt;\n    &lt;!-- ... --&gt;\n&lt;/table&gt;\n\n&lt;script bundle&gt;\ndocument.addEventListener(\"DOMContentLoaded\", () =&gt; {\n    document.querySelectorAll(\".datatable\").forEach(table =&gt; {\n        // ...\n    });\n});\n&lt;/script&gt;\n\n&lt;style bundle&gt;\n.datatable {\n    /* ... */\n}\n&lt;/style&gt;\n</code></pre> <p>When this component is used as part of your request, its associated assets will be automatically included.</p> <p>You can import any javascript package from node_modules in the script tag as it will be bundled using esbuild.</p> <p>Tip</p> <p>No jinja directives can be used inside the bundled script and style tags</p> <p>Note</p> <p>Extracted assets will be stored in your assets folder. You can customize the name of the extracted files using a value for the bundle attribute: <code>&lt;script bundle=\"filename.js\"&gt;</code></p>"},{"location":"guides/assets/#styling","title":"Styling","text":"<p>Hyperflask uses Tailwind for styling. It is fully integrated and you can use tailwind utility classes across pages and components.</p>"},{"location":"guides/assets/#bundles","title":"Bundles","text":"<p>You can create bundles compiled using esbuild. Bundles need to be declared in the configuration. Bundles can be js or css files.</p> <p>Let's imagine a file located at app/assets/app.js. Create a bundle for it by adding the following in config.yml:</p> <pre><code>assets_bundles:\n  - app.js\n</code></pre> <p>The bundles will be automatically included on all pages. To prevent automatic inclusion, add <code>assets_include: false</code>. You can then include your bundle manually using <code>app.assets.include(\"app.js\")</code> in python code or <code>{{ include_asset(\"app.js\") }}</code> in templates.</p> <p>Esbuild will bundle css files included in js files. These files will be automatically included when their parent js file is.</p>"},{"location":"guides/collections/","title":"Collections","text":"<p>Collections are a way to manage a collection of static pages generated from a content source.</p> <p>Info</p> <p>This feature is provided by Flask-Collections</p> <p>Your app can have multiple collections. Each collection has a set of entries.</p> <p>Each entry has a \"slug\", some content and a set of properties. Formats for each entries varies depending on the collection type.</p> <p>When the <code>is_markdown</code> property is set to true (which is automatic if a file-based entry has the .md extension), the content is rendered as markdown.</p> <p>When using a filename, it can contain a date prefix in the form of YYYY-MM-DD. The date will be available as the <code>date</code> property.</p>"},{"location":"guides/collections/#file-backed-collections","title":"File-backed collections","text":"<p>In a directory named after the collection located in app/collections, use one file per entry.</p> <p>Example:</p> <pre><code>app/collections\n  blog/\n    2025-01-01-new-year.md\n    2025-02-01-second-month.md\n</code></pre> <p>Example 2025-01-01-new-year.md:</p> <pre><code>---\ntitle: \"Happy new year!\"\n---\nHello world\n</code></pre>"},{"location":"guides/collections/#data-backed-collections","title":"Data-backed collections","text":"<p>These are collections where entries are all stored in a single structed file like CSV, JSON or YAML.</p> <p>Example app/collections/blog.csv:</p> <pre><code>slug,date,title,content\nnew-year,2025-01-01,\"Happy new year!\",\"Hello world\"\n</code></pre> <p>An sqlite database can also be used using the .db extension. A table or query must be provided a config.</p>"},{"location":"guides/collections/#configuring-collections","title":"Configuring collections","text":"<p>Collections can be configured under the <code>COLLECTIONS</code> key. Create a subkey named after the collection that contains a dict of options.</p> <p>By default, collections are bound to a url under a path named after the collection. This can be overriden using the <code>url</code> config key. You can also provide a layout template for collection entries. This template will receive an <code>entry</code> and <code>content</code> variable.</p> <pre><code>collections:\n    blog:\n        url: /blog\n        layout: layouts/post.html\n    categories:\n        path: meta.db\n        table: categories\n</code></pre> <p>To prevent a collection from being exposed via a URL, set url to false.</p>"},{"location":"guides/collections/#accessing-collections-programmatically","title":"Accessing collections programmatically","text":"<p>Collections are accessible under <code>app.collections</code>.</p> <pre><code>for post in app.collections.blog:\n    print((post.slug, post.title, post.url))\n</code></pre>"},{"location":"guides/components/","title":"Components","text":"<p>Components are essentials pieces of Hyperflask apps. They can be interactive, are isolated and can apply to the frontend of backend.</p> <p>Info</p> <p>This feature is in part provided by Flask-Super-Macros</p>"},{"location":"guides/components/#html-components","title":"HTML components","text":"<p>HTML components are re-usable pieces of HTML. Define them in the app/components folder. The filename is the component name.</p> <p>Components can recieve parameters named props.</p> <p>For example, to create a dropdown component, let's create the file app/components/Dropdown.html:</p> <pre><code>&lt;div class=\"dropdown\"&gt;\n    &lt;button&gt;{{props.label}}&lt;/button&gt;\n    &lt;ul class=\"dropmenu\"&gt;\n        {% for item in props.items %}\n            &lt;li&gt;{{item}}&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre> <p>Here, the component must be provided 2 parameters: label and items.</p> <p>To call this component, we use a special syntax in our templates:</p> <ul> <li><code>&lt;{ComponentName prop1=value prop2=value }/&gt;</code> : to call a component without providing children</li> <li><code>&lt;{ComponentName prop1=value }&gt;...&lt;/{ComponentName}&gt;</code> : to provide children</li> </ul> <p>To use python expressions as prop values, surround them with parentheses: <code>&lt;{Component prop1=(1+1) }/&gt;</code></p> <p>Back to our example:</p> <pre><code>&lt;{Dropdown label=\"Colors\" items=[\"red\", \"blue\"] }/&gt;\n</code></pre> <p>Now, let's rework our component to use another component for the dropdown items.</p> <pre><code>&lt;div class=\"dropdown\"&gt;\n    &lt;button&gt;{{props.label}}&lt;/button&gt;\n    &lt;ul class=\"dropmenu\"&gt;\n        {{children()}}\n    &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre> <p>Now create app/components/DropdownItem.html:</p> <pre><code>&lt;li&gt;\n    &lt;a href=\"{{prop.url}}\"&gt;{{children()}}&lt;/a&gt;\n&lt;/li&gt;\n</code></pre> <p>And finally, let's create a dropdown:</p> <pre><code>&lt;{Dropdown label=\"Countries\"}&gt;\n    &lt;{DropdownItem url=url_for('countries', code=\"fr\")}&gt;France&lt;/{DropdownItem}&gt;\n    &lt;{DropdownItem url=url_for('countries', code=\"hk\")}&gt;Hong Kong&lt;/{DropdownItem}&gt;\n&lt;{/Dropdown}&gt;\n</code></pre> <p>Info</p> <p>Components are in fact jinja macros. Any jinja macro can be called using the new macro tag syntax. Read more about Flask Super Macros</p>"},{"location":"guides/components/#frontend-interactions-using-alpinejs","title":"Frontend interactions using Alpine.js","text":"<p>Alpine.js can be used to add interactivity to your component on the frontend. Alpine is bundled with Hyperflask and automatically loaded when used as part of a component.</p> <p>Example using the previous app/components/Dropdown.html:</p> <pre><code>&lt;div class=\"dropdown\" x-data=\"{ open: false }\"&gt;\n    &lt;button @click=\"open = true\"&gt;{{props.label}}&lt;/button&gt;\n    &lt;ul class=\"dropmenu\" x-show=\"open\"&gt;\n        {{children()}}\n    &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"guides/components/#backend-logic-and-interactions-with-htmx","title":"Backend logic and interactions with HTMX","text":"<p>Components can define their own custom backend logic. Similar to pages, files should use the jpy extension and provide a frontmatter with the python code.</p> <p>Functions named after HTTP methods will be registered as routes. For example, if a get function exists, Hyperflask will make the component accessible through GET requests. These functions can return a dict with component props to render the component or any other valid Flask response value.</p> <p>Use HTMX to call your component logic and retrieve only the necessery HTML.</p> <p>Let's create a todo app:</p> <p>app/pages/index.jpy:</p> <pre><code>---\nfrom app.models import Todo\npage.todos = Todo.find_all()\n---\n&lt;table&gt;\n    {% for todo in todos %}\n        &lt;{TodoItem todo=todo }/&gt;\n    {% endfor %}\n&lt;/table&gt;\n&lt;button hx-get=\"{{url_for('TodoItemForm')}}\" hx-target=\"previous\" hx-swap=\"beforeend\"&gt;Add todo&lt;/button&gt;\n</code></pre> <p>app/components/TodoItem.jpy:</p> <pre><code>---\nfrom app.models import db, Todo\n\ndef get():\n    todo = Todo.get_or_404(request.args['id'])\n    return {\"todo\": todo}\n\ndef delete():\n    with db:\n        todo = Todo.get_or_404(request.args['id'])\n        todo.delete()\n    return \"\"\n---\n&lt;tr&gt;\n    &lt;td&gt;{{props.todo.title}}&lt;/td&gt;\n    &lt;td&gt;\n        &lt;button hx-get=\"{{url_for('TodoItemForm', id=props.todo.id)}}\" hx-target=\"closest tr\" hx-swap=\"outerHTML\"&gt;Delete&lt;/button&gt;\n        &lt;button hx-delete=\"{{url_for('TodoItem', id=props.todo.id)}}\" hx-target=\"closest tr\" hx-swap=\"delete\"&gt;Delete&lt;/button&gt;\n    &lt;/td&gt;\n&lt;/tr&gt;\n</code></pre> <p>app/components/TodoItemForm.jpy:</p> <pre><code>---\nfrom hyperflask import request, current_app\nfrom app.models import db, Todo\n\ndef get():\n    todo = Todo.get_or_404(request.args['id']) if \"id\" in request.args else None\n    return {\"todo\": todo}\n\ndef post():\n    with db:\n        if \"id\" in request.values:\n            todo = Todo.get_or_404(request.args['id'])\n        else:\n            todo = Todo()\n        todo.title = request.form[\"title\"]\n        todo.save()\n    return current_app.components.TodoItem(todo=todo) # return another component\n---\n&lt;tr&gt;\n    &lt;td&gt;\n        &lt;input type=\"text\" name=\"title\" value=\"{{props.todo.title if props.todo else ''}}\" required&gt;\n    &lt;/td&gt;\n    &lt;td&gt;\n        &lt;button hx-get=\"{{url_for('TodoItemForm', id=props.todo.id if props.todo else None)}}\" hx-include=\"closest tr\" hx-target=\"closest tr\" hx-swap=\"outerHTML\"&gt;Save&lt;/button&gt;\n    &lt;/td&gt;\n&lt;/tr&gt;\n</code></pre> <p>Warning</p> <p>Unlike pages, all python imports are mandatory in components</p> <p>Tip</p> <p>The <code>request</code> object in Hyperflask uses htmx-Flask subclass that provides easy access to htmx headers.</p>"},{"location":"guides/components/#htmx-utilities","title":"HTMX utilities","text":"<p>Perform an htmx redirection using <code>htmx_redirect()</code>:</p> <pre><code>from hyperflask import htmx_redirect\ndef post():\n    # ...\n    return htmx_redirect(\"/\")\n</code></pre> <p>Perform an Out-Of-Band (oob) swap using <code>htmx_oob()</code>:</p> <pre><code>from hyperflask import htmx_oob\ndef post():\n    # ...\n    return htmx_oob(current_app.components.Sidebar()) # replaces the sidebar element with a new version of itself\n</code></pre>"},{"location":"guides/components/#styling-and-scripting","title":"Styling and scripting","text":"<p>Scripts and styles can be embedded in components and bundled automatically.</p> <p>See Embedded scripts and styles in the Assets guide</p>"},{"location":"guides/components/#pure-frontend-components","title":"Pure frontend components","text":"<p>Pure frontend components can be created using .js (or .ts) files for Web Components or .jsx (or .tsx) for React components.</p> <p>Tip</p> <p>New adapters can be created for other frontend frameworks and component libraries. You can also force which adapter to use for one or multiple files.</p>"},{"location":"guides/components/#web-components","title":"Web Components","text":"<p>In the case of Web Components, the js file should define the custom element and register it. The filename should be named after the component name (use underscores instead of dashes).</p> <p>When the component is used as part of a template, the custom tag will be used and the file included in the page assets.</p> <p>Example, app/components/custom_dropdown.js:</p> <pre><code>class CustomDropdown extends HTMLElement {\n    // ...\n}\n\ncustomElements.define('custom-dropdown', CustomDropdown);\n</code></pre> <p>In a template: <code>&lt;{custom_dropdown}/&gt;</code></p> <p>Tip</p> <p>lit is a great library to implement Web Components. To use with Hyperflask, simply install it and use it as described in their documentation.</p>"},{"location":"guides/components/#react-components","title":"React components","text":"<p>Define react components as usual in a jsx file named after the component. Call them in your template like any other component. Each component call will create an independant react tree.</p> <p>Important</p> <p>React is not bundled with Hyperflask. You will need to install it using npm.</p> <p>Properties provided to the component will be serialized to JSON. You cannot provide children.</p> <p>Example, app/components/Dropdown.jsx:</p> <pre><code>function Dropdown(props) {\n    return &lt;div&gt;&lt;/div&gt;;\n}\n</code></pre> <p>In a template: <code>&lt;{Dropdown}/&gt;</code></p>"},{"location":"guides/components/#built-in-ui-components","title":"Built-in UI components","text":"<p>Hyperflask includes a rich library of UI components powered by DaisyUI.</p> <p>Check out the Components library</p>"},{"location":"guides/config/","title":"Configuration","text":"<p>Hyperflask configuration is stored in a YAML file called config.yml at the root of your project folder.</p> <p>Loaded configuration is then available through <code>app.config</code>.</p> <p>To prevent including secret variables in the config file, you can use environment variables. Any variable prefixed using <code>FLASK_</code> will be used a a configuration value. <code>FLASK_SECRET_KEY</code> would be available under <code>app.config['SECRET_KEY']</code>.</p> <p>A .env file containing environment variables can be placed at the root of your project folder. It will be automatically loaded.</p> <p>Info</p> <p>This feature is provided by Flask-Configurator</p>"},{"location":"guides/config/#environment-specific-configuration","title":"Environment-specific configuration","text":"<p>Hyperflask defines the concept of environments to load different set of configs depending on the execution context.</p> <p>The default environment is named production. When debug is activated, the environment is set to * development*. The environment can be overriden using the <code>ENV</code> configuration (or <code>FLASK_ENV</code> environment variable).</p> <p>An environment specific configuration file can be created. It will be loaded after config.yml and will override its values. The format should be config.env_name.yml, so config.production.yml or config.development.yml for the default environments.</p> <p>An environment specific .env file can also be created following the format .env.env_name, so .env.production or .env.development.</p>"},{"location":"guides/config/#common-configuration-values","title":"Common configuration values","text":"Key Description Default location Default value SECRET_KEY The encryption key for all secret values (including the session) .env random"},{"location":"guides/deploy/","title":"Deploy to production","text":"<p>Info</p> <p>This feature is provided by Docker Web Deploy</p> <p>Run the following command:</p> <pre><code>$ hyperflask deploy\n</code></pre>"},{"location":"guides/emails/","title":"Emails","text":"<p>Send emails templated with MJML.</p> <p>Info</p> <p>This feature is provided by Flask-Mailman and Flask-Mailman-Templates</p>"},{"location":"guides/emails/#templates","title":"Templates","text":"<p>Email templates are located in the app/emails folder. The recommended format is MJML for the best possible email compatible html rendering.</p> <p>Template files can contain a YAML frontmatter with extra metadata like subject. The frontmatter values are templated as well.</p> <pre><code>---\nsubject: \"Welcome {{name}} to example.com!\"\n---\n{% use_layout %}\n&lt;mj-text&gt;\n    &lt;h1&gt;Hello {{name}},&lt;/h1&gt;\n    &lt;p&gt;Thank you for joining&lt;/p&gt;\n&lt;/mj-text&gt;\n</code></pre> <p>A default layout is provided by Hyperflask. Feel free to override it by creating app/emails/layout.mjml. Using the directive <code>{% use_layout %}</code> ensures that the layout is used for this template.</p> <p>Tip</p> <p>When providing your own layout, you can extend from base_layout.html.</p>"},{"location":"guides/emails/#sending","title":"Sending","text":"<p>To send an email, use <code>send_mail()</code>:</p> <pre><code>from hyperflask import send_mail\nsend_mail(\"welcome.mjml\", \"user@example.com\")\n</code></pre> <p>You can provide template variables as keywork arguments.</p>"},{"location":"guides/emails/#configuring-an-smtp-server","title":"Configuring an SMTP server","text":"<p>When developping, mailpit is running to provide a live view of all the emails you are sending. Access it at http://localhost:8025.</p> <p>Info</p> <p>When not using Hyperflask-Start, if no backend is defined, mail will be printed on stdout when in debug mode.</p> <p>For sending email in production, provide the following configuration in your config.yml:</p> <pre><code>mail_server: some_server.com\nmail_port: 587\nmail_username: some_username\nmail_password: some_password\nmail_use_tls: true\nmail_default_sender: no-reply@yourdomain.com\n</code></pre>"},{"location":"guides/files/","title":"Files","text":"<p>Manage user uploaded files.</p> <p>Info</p> <p>This feature is provided by Flask-Files</p>"},{"location":"guides/files/#upload-files-to-store-in-models","title":"Upload files to store in models","text":"<p>Add a file column to your model:</p> <pre><code>from hyperflask.factory import db\n\nclass MyModel(db.Model):\n    file = Column(type=db.File)\n</code></pre> <p>In a page using a form:</p> <pre><code>---\nform = page.form()\ndef post():\n    if form.validate():\n        with db:\n            obj = MyModel.create(**form.data)\n---\n&lt;{Form}&gt;\n    &lt;{FormField form.file.file(\"File\") }/&gt;\n    &lt;{SubmitButton}&gt;Upload&lt;/{}&gt;\n&lt;/{Form}&gt;\n</code></pre> <p>Or without forms:</p> <pre><code>MyModel.create(file=request.files['file'])\n</code></pre> <p>When accessing the model property, the value is a file object.</p> <p>To generate a url for the file:</p> <pre><code>---\npage.obj = MyModel.get(1)\n---\n&lt;img src=\"{{obj.file}}\"&gt;\n</code></pre>"},{"location":"guides/files/#using-s3","title":"Using S3","text":"<p>To store files on S3 (or compatible services), configure your app as follow:</p> <p>In .env:</p> <pre><code>AWS_ACCESS_KEY_ID=...\nAWS_SECRET_ACCESS_KEY=...\nAWS_DEFAULT_REGION=...\n</code></pre> <p>In config.yml:</p> <pre><code>files_default_filesystem: s3\nfiles_base_path: bucket_name\n</code></pre>"},{"location":"guides/files/#uploading-without-models","title":"Uploading without models","text":"<p>Use <code>save_file()</code> to store a file and get a file object. File objects are serializable as string or JSON.</p> <pre><code>---\nfrom hyperflask import save_file\n\nform = page.form()\n\ndef post():\n    if form.validate():\n        file = save_file(form.file.data)\n        # do something with file object\n---\n&lt;{Form}&gt;\n    &lt;{FormField form.file.file(\"File\") }/&gt;\n    &lt;{SubmitButton}&gt;Upload&lt;/{}&gt;\n&lt;/{Form}&gt;\n</code></pre>"},{"location":"guides/for-flask-users/","title":"For Flask users","text":"<p>Hyperflask is a framework built on top of Flask combining multiple extensions into a unique experience.</p> <p>Instead of creating an instance of <code>Flask</code> for your app, you create an instances of <code>Hyperflask</code>. See the project's homepage for a list of all extensions used by Hyperflask. A lot of them are developed as part of the Hyperflask organization.</p> <p>The <code>flask</code> module can be replaced by <code>hyperflask</code> for all your Flask related imports.</p> <p>The <code>hyperflask</code> command should be used instead of <code>flask</code> to run and manage your app.</p> <p><pre><code># app.py\nfrom hyperflask import Hyperflask, request\n\napp = Hyperflask(__name__)\n\n@app.route('/')\ndef index():\n    return render_template_string(\"hello {{name}}\", name=request.args.get('name', 'world'))\n</code></pre> <pre><code>$ hyperflask dev\n</code></pre></p>"},{"location":"guides/forms/","title":"Forms","text":"<p>Easily define forms that can be validated on the frontend and the backend.</p> <p>Info</p> <p>This feature is provided by Jinja-WTForms</p>"},{"location":"guides/forms/#creating-forms-in-templates","title":"Creating forms in templates","text":"<p>Create forms in templates by calling fields on a <code>form</code> object as if they would be already declared. The syntax for calling fields is slightly different compared to raw wtforms as it also includes the field type.</p> <pre><code>{# signup.html #}\n&lt;{Form form}&gt;\n    &lt;{FormField form.firstname.text(\"First name\") }/&gt;\n    &lt;{FormField form.lastname.text(\"Last name\") }/&gt;\n    &lt;{FormField form.email.email(\"Email\", required=True) }/&gt;\n    &lt;{FormField form.password.password(\"Password\", required=True) }/&gt;\n    &lt;{SubmitButton}&gt;Signup&lt;/{}&gt;\n&lt;/{Form}&gt;\n</code></pre> <p>Info</p> <p>This example uses built-ins UI form components</p> <p>Field declarations look like <code>form.field_name.field_type(label, **options)</code>. Available field types: checkbox, decimal, date, datetime, float, int, radio, select, selectmulti, text, textarea, password, hidden, datetimelocal, decimalrange, email, intrange, search, tel, url, file, files.</p> <p>Field types map to their equivalent wtforms field definition.</p> <p>The <code>{% form %}</code> directive can also be used before a form declaration. When used, a form object will be automatically created if none are provided. This directive also allows to customize the class name and declare multiple forms per template.</p>"},{"location":"guides/forms/#validating-data-on-the-backend","title":"Validating data on the backend","text":"<p>The process is the same as using Wtforms.</p> <p>To make things easier, when using pages, forms declared inside pages are available through <code>page.form</code> and <code>page.forms</code>. (It also works for components)</p> <p>Example page:</p> <pre><code>---\nform = page.form()\ndef post():\n    if form.validate():\n        # do something with form.data\n---\n&lt;{Form form}&gt;\n    &lt;{FormField form.name.text(\"Name\", required=True) }/&gt;\n    &lt;{SubmitButton}&gt;Signup&lt;/{}&gt;\n&lt;/{Form}&gt;\n</code></pre>"},{"location":"guides/forms/#forms-outside-pages","title":"Forms outside pages","text":"<p>Forms can be defined in any template. It is recommended to use the <code>{% form %}</code> directive as it will ensure a form object is always available.</p> <p>Form classes can be accessed through <code>app.forms[template_filename]</code>.</p>"},{"location":"guides/forms/#form-components","title":"Form components","text":"<p>Hyperflask includes some form related UI components to build beautiful apps. Input widgets are also automatically styled.</p> <p><code>&lt;{Form}/&gt;</code> can be used as an alternative to the form tag. It takes the form object as the first positional argument.</p> <p>Use <code>&lt;{FormField }/&gt;</code> with the field as first argument to display a field correctly.</p>"},{"location":"guides/forms/#posting-forms-using-htmx","title":"Posting forms using HTMX","text":"<p><code>&lt;{HxForm}/&gt;</code> can be used to create htmx powered forms. Use <code>action=url</code> as usual to define the form target. The form will be automatically resetted on successful submit.</p>"},{"location":"guides/i18n/","title":"Internationalization","text":"<p>Info</p> <p>This feature is provided by Flask-Babel-Hyper</p>"},{"location":"guides/i18n/#marking-strings-for-translation","title":"Marking strings for translation","text":"<p>Use gettext functions to mark all strings requiring translation.</p> <p>In templates:</p> <pre><code>{{_(\"this string will be translated\")}}\n</code></pre> <p>In python:</p> <pre><code>from hyperflask import _\n\n_(\"this string will be translated\")\n</code></pre> <p>Other available functions:</p> Full name Short name Description gettext _ Return a localized string ngettext _n Like gettext(), but consider plural forms pgettext _p Like gettext(), but specify the context lazy_gettext _lazy Like gettext(), but evaluation is delayed <p>Tip</p> <p>Format strings should be resolved after the translation has happenned.</p> <p>Bad: <code>_(\"hello %(name)s\" % {\"name\": \"world\"})</code></p> <p>Good: <code>_(\"hello %(name)s\") % {\"name\": \"world\"}</code></p>"},{"location":"guides/i18n/#creating-a-translation","title":"Creating a translation","text":"<p>Run the following command:</p> <pre><code>$ hyperflask babel init LOCALE\n</code></pre> <p>Where LOCALE should be a locale code (eg: <code>fr</code>)</p> <p>Translate the generated po file in app/translations/{LOCALE}/LC_MESSAGES using a tool like poedit.</p> <p>Once all the translations have been completed, run the following command:</p> <pre><code>$ hyperflask babel compile\n</code></pre>"},{"location":"guides/i18n/#locale-detection","title":"Locale detection","text":"<p>Locale is automatically selected from, in order:</p> <ul> <li>the <code>locale</code> query string parameter</li> <li>the browser's Accept-Language header</li> <li>the default locale</li> </ul> <p>When the locale is set via the query string parameter, it is stored in the session until further change.</p>"},{"location":"guides/i18n/#updating-translations","title":"Updating translations","text":"<p>Run the following command:</p> <pre><code>$ hyperflask babel update\n</code></pre> <p>Add missing translations in po files then run the following command:</p> <pre><code>$ hyperflask babel compile\n</code></pre>"},{"location":"guides/models/","title":"Models","text":"<p>Models are the way to persist data in a database. Hyperflask uses SQLORM, an easy to use ORM that does not abstract away SQL. By default, Hyperflask apps are configured to use SQLite which has been tuned for great web app performance.</p> <p>Info</p> <p>This feature is provided by Flask-SQLORM</p>"},{"location":"guides/models/#defining-models","title":"Defining models","text":"<p>Models are classes inheriting from <code>Model</code>. To define which table they represent, use the <code>table</code> class property.</p> <p>To define column mapping, define properties via annotations. The type used will be converted to an sql type. For more control over the mapping, you can use instantiate <code>Column()</code> objects.</p> <p>Example app/models.py:</p> <pre><code>from hyperflask.factory import db\n\nclass Task(db.Model):\n    table = \"tasks\"\n\n    id: int\n    title: str = db.Column(type=\"varchar(20)\") # set the column type (used in create_table())\n    done = db.Column(\"completed\", bool, default=False) # no annotation, column name is \"completed\" but property name will be \"done\"\n</code></pre> <p>Once columns are defined via annotations or <code>db.Column</code> properties, they are accessible as class and instance properties.</p> <p>Read more in sqlorm documentation</p>"},{"location":"guides/models/#persisting-data","title":"Persisting data","text":"<p>Manipulate model objects as you would with any python objects. The following methods help you execute DML statements:</p> <ul> <li><code>save()</code> executes <code>insert()</code> or <code>update()</code> depending on the fact that the object has a primary key or not</li> <li><code>insert()</code> executes an insert statement</li> <li><code>update()</code> executes an update statement</li> <li><code>delete()</code> deletes a delete statement</li> <li><code>refresh()</code> executes a select statement (same as <code>get()</code>) and updates the object attribute values</li> <li><code>create()</code> a class method to create and insert an object in one line</li> </ul> <p>These methods (apart from <code>create()</code>) return a boolean indicating if the operation was performed.</p> <p>The data used to insert or update will be limited to \"dirty\" attributes, which means attributes that have been modified since the last DML statement. Setting an attribute will automatically flag it as dirty.</p> <p>To call this methods, you must be in a transaction context. Use the db object to initiate one.</p> <pre><code>from app.models import db, Task\n\nwith db:\n    task = Task.create(title=\"my task\") # INSERT INTO tasks (title) VALUES ('my task')\n\n    task = Task()\n    task.title = \"my task\"\n    task.save() # INSERT INTO tasks (title) VALUES ('my task')\n    # same as task.insert()\n\n    task = Task.get(1)\n    task.title = \"renamed task\"\n    task.save() # UPDATE tasks SET title = 'renamed task' WHERE id = 1\n    # same as task.update()\n\n    task = Task.get(2)\n    task = Task.get_or_404(2) # raise a 404 error if object not found\n    task.delete() # DELETE FROM tasks WHERE id = 2\n\n    task = Task()\n    task.id = 1\n    task.refresh() # SELECT * FROM tasks WHERE id = 1\n</code></pre> <p>Read more in sqlorm documentation</p>"},{"location":"guides/models/#querying-data","title":"Querying data","text":"<p>The following methods can be used to query data:</p> <ul> <li><code>query()</code> executes the provided statement using <code>fetchhydrated()</code></li> <li><code>find_all()</code> constructs a select statement based on the provided arguments and executes using <code>query()</code></li> <li><code>find_one()</code> same as <code>find_all()</code> but only returns the first row</li> <li><code>get()</code> to find one row by primary key</li> </ul> <p>The two finder methods can take as argument a where condition (sql string) or keyword arguments representing attributes to filter by.</p> <p>It is not needed to provide a transaction context to call these methods.</p> <pre><code>todos = Task.query(\"SELECT * FROM tasks WHERE NOT done\")\ntodos = Task.find_all(\"NOT done\")\ntodos = Task.find_all(Task.done==False)\ntodos = Task.find_all(done=False)\ntask = Task.find_one(\"id=1\")\ntask = Task.get(1)\n</code></pre> <p>Read more in sqlorm documentation</p>"},{"location":"guides/models/#rendering-model-objects","title":"Rendering model objects","text":"<p>Model objects can be rendered using any jinja macro (components being macros). Set the <code>__macro__</code> class property to the name of the macro.</p> <pre><code>class Task:\n    __macro__ = \"Task\"\n</code></pre> <p>The macro will be provided an <code>obj</code> property. This can be overriden using the syntax <code>MacroName(property)</code>.</p> <pre><code>class Task:\n    __macro__ = \"Task(task)\"\n</code></pre> <p>In <code>app/components/Task.html</code>:</p> <pre><code>&lt;label&gt;\n    &lt;input type=\"checkbox\"&gt;\n    {{props.task.title}}\n&lt;/label&gt;\n</code></pre> <p>Once defined, you can \"print\" your objects and result sets directly in your templates:</p> <pre><code>---\npage.tasks = Task.find_all()\n---\n{{tasks}}\n</code></pre> <pre><code>---\npage.task = Task.get(1)\n---\n{{task}}\n</code></pre>"},{"location":"guides/models/#going-further","title":"Going further","text":"<p>Read sqlorm documentation</p>"},{"location":"guides/pages/","title":"Pages","text":"<p>Easily create static and dynamic pages with a layout.</p> <p>Info</p> <p>This feature is provided by Flask-File-Routes</p>"},{"location":"guides/pages/#dynamic-pages","title":"Dynamic pages","text":"<p>Dynamic pages can use the following formats:</p> <ul> <li>jpy: jinjapy hybrid format that let you execute code before rendering the template</li> <li>py: python code only</li> </ul> <p>A jinjapy file contains 2 sections:</p> <ul> <li>Some Python code enclosed by lines containg 3 dashes \"---\"</li> <li>A body containing some Jinja template code</li> </ul> <p>Both are optional:</p> <ul> <li>If the python code is missing, the file only contains a Jinja template</li> <li>If the python code is left unclosed (the file starts with \"---\" on a single line followed by some python code), the file has no template</li> </ul> <p>The python code has a few global variables injected when executed: <code>page</code>, <code>request</code>, <code>abort</code>, <code>redirect</code>, <code>url_for</code>, <code>current_app</code>, <code>render_template</code>.</p>"},{"location":"guides/pages/#content-pages","title":"Content pages","text":"<p>No python code will be executed on content pages.</p> <p>Content pages can use the following formats:</p> <ul> <li>html: a standard jinja template</li> <li>md: a standard jinja template that will be rendered using markdown</li> </ul> <p>All formats can have a YAML frontmatter defining variables that will be injected in the page object.</p>"},{"location":"guides/pages/#how-routing-works","title":"How routing works","text":"<p>The URL rule is constructed using the following rules:</p> <ul> <li><code>index.ext</code> file are roots</li> <li>folder hierarchy are transformed to url paths:<ul> <li><code>posts/release-annoucement.ext</code> converts to <code>/posts/release-annoucement</code></li> <li><code>posts/index.ext</code> converts to <code>/posts</code></li> <li><code>folder/subfolder/page.ext</code> converts to <code>/folder/subfolder/page</code></li> </ul> </li> <li>placeholders are allowed in filenames:<ul> <li><code>posts/&lt;slug&gt;.ext</code> converts to <code>/posts/&lt;slug&gt;</code></li> </ul> </li> </ul> <p>The placeholder value is available through the <code>page</code> object (eg: <code>page.slug</code>).</p>"},{"location":"guides/pages/#the-page-template","title":"The page template","text":"<p>Templates are powered by Jinja.</p> <p>We recommend reading the Flask templating guide.</p> <p>Hyperflask includes built-ins UI components powered by DaisyUI. Check out the Components guide.</p>"},{"location":"guides/pages/#layouts","title":"Layouts","text":"<p>Hyperflask makes managing layouts for your pages easier. Layouts are saved in the app/layouts folder. The default layout can be overriden at app/layouts/default.html. (Hyperflask provides a default layout when none is created)</p> <p>For a page to use a layout, include the <code>{% use_layout %}</code> at the top of the template. Layouts can provide multiple placeholders to fill in named \"blocks\". Content outside of blocks will be added to the default block named \"content\".</p> <p>Example template:</p> <pre><code>{% use_layout %}\n\n{% block page_title %}New title!{% endblock %}\n\nMy page content\n</code></pre> <p><code>{% use_layout %}</code> can also be given a template filename as argument to extend from any other template.</p> <p>Tip</p> <p>When providing your own layout, you can extend from layouts/base.html.</p>"},{"location":"guides/pages/#the-page-object","title":"The page object","text":"<p>The <code>page</code> object is accessible without import in any pages or can be imported from <code>hyperflask</code>.</p> <p>Any properties set onto the object will be available as a variable in the template.</p> <p>Some helper methods that immediatly stop the page execution and return a response:</p> <ul> <li>return an http error code using <code>page.abort(http_code)</code></li> <li>redirect to another page using <code>page.redirect(url)</code></li> <li>send any response object using <code>page.respond(response)</code></li> </ul> <p>URL placeholders are available as read-only properties of the page object.</p> <p>Additional helpers can be registered on the page object:</p> <pre><code>@app.page_helper\ndef method(page):\n    return request.method\n\npage.method\n</code></pre> <p>Info</p> <p>The page object is accessible under <code>hyperflask.page</code> or <code>g.page</code> in all routes of your app.</p> <pre><code>from hyperflask import page\n\n@app.route(\"/\")\ndef index():\n    page.message = \"hello world\"\n    return render_template_string(\"{{message}}\")\n</code></pre>"},{"location":"guides/pages/#handling-different-http-methods","title":"Handling different HTTP methods","text":"<p>When using jpy or python files, you can create functions named after http methods in lower case (get, post, put, patch, delete). These functions will be executed after the main body of the python code depending on the request's http method.</p> <p>Allowed http methods for a route depends on:</p> <ul> <li>If no method function is present, the route will be available throught GET only</li> <li>As soon as a method function is present, the route is available through the defined http methods.</li> <li>Possible methods can be defined manually using a comment at the start of the python code listing allowed http methods in the following format: <code># methods=GET,POST</code></li> </ul>"},{"location":"guides/pages/#the-request-object","title":"The request object","text":"<p>A <code>request</code> object is available in your pages' python code. It can be used to access the request's data and metadata.</p> <ul> <li>Use <code>request.args</code> to access query string parameters (<code>request.args['param-name']</code>)</li> <li>Use <code>request.form</code> to access form data (<code>request.form['input-name']</code>)</li> </ul> <p>See Flask documentation about the request object for more information.</p>"},{"location":"guides/pages/#function-based-endpoints","title":"Function-based endpoints","text":"<p>Hyperflask also allows you to create endpoints using python functions like Flask does.</p> <p>In <code>app/routes.py</code>:</p> <pre><code>from hyperflask.factory import app\n\n@app.route('/my-endpoint')\ndef my_endpoint():\n    return \"hello\"\n</code></pre> <p>Templates can also be used. They should be located in the <code>app/templates</code> folder.</p>"},{"location":"guides/push/","title":"Server push","text":"<p>Allow your frontend to react to server events using Server Sent Events (SSE).</p> <p>Info</p> <p>This feature is provided by Flask-Mercure-SSE</p>"},{"location":"guides/push/#publishing-events","title":"Publishing events","text":"<p>Use <code>app.sse.publish(event_name, data)</code> for publishing a new event. By default, anybody listening on the SSE endpoint will see these events. Add <code>private=True</code> to only send to authentified clients.</p> <pre><code>current_app.sse.publish(\"message\", \"hello world\")\n</code></pre> <p>Data sent with the event can be a string or a json serializable object. You can send rendered component by calling components programmatically:</p> <pre><code>current_app.sse.publish(\"message\", current_app.components.ChatMessage(msg=\"hello world\"))\n</code></pre>"},{"location":"guides/push/#listening-for-events","title":"Listening for events","text":"<p>Use htmx sse extension to connect to the SSE stream. Retrieve the stream URL for an event using <code>mercure_hub_url(event_names)</code>. Use <code>mercure_authentified_hub_url(event_names)</code> to create authentified URLs that can receive private events.</p> <pre><code>&lt;div id=\"messages\" hx-ext=\"sse\" sse-connect=\"{{mercure_authentified_hub_url('messages')}}\" hx-swap=\"beforeend\"&gt;\n&lt;/div&gt;\n</code></pre> <p>Hyperflask also provides a component that encapsulates the previous html:</p> <pre><code>&lt;{MercureStream topic=\"messages\" id=\"messages\"}&gt;\n&lt;/{MercureStream}&gt;\n</code></pre>"},{"location":"guides/push/#differences-between-dev-and-prod","title":"Differences between dev and prod","text":"<p>While in development, a lightweight dev-only implementation of a Mercure hub is used. It is not meant to be used by more than a few users at once and is for testing only with minimum setup.</p> <p>When going into production, a proper Mercure Hub should be used. The Mercure Hub is bundled inside the production image and will be run alongside your app.</p>"},{"location":"guides/push/#using-with-models","title":"Using with models","text":"<p>Model objects can be used as topic and/or data when publishing and subscribing. Combined with model's rendering capability, this makes it easy to publish rendered objects on a stream.</p> <p>When using a model class as topic, the topic will be the class name. When using a model object, the topic will be scoped to the object id.</p> <pre><code>class TodoList(db.Model):\n    pass\n\nclass TodoItem(db.Model):\n    __macro__ = \"TodoItem\"\n\ntodolist = TodoList()\nitem1 = TodoItem()\n\n# publish the rendered item using the &lt;{TodoItem}/&gt; component\n# on the todolist stream named \"TodoList/{id}\" (where id will be replaced by the list id)\ncurrent_app.sse.publish(todolist, item1)\n</code></pre>"},{"location":"guides/setup/","title":"Setup","text":""},{"location":"guides/setup/#requirements","title":"Requirements","text":"<p>Hyperflask simplifies development environments by standardizing everything around containers.</p> <p>VS Code is also the recommended editor (and currently the only one with syntax highlighting for Jinjapy files).</p> <p>What you will need:</p> <ul> <li>A UNIX like system (Linux, MacOS or WSL on Windows)</li> <li>Docker</li> <li>VS Code</li> </ul> <p>Python is not needed on your machine, everything will be executed inside containers.</p>"},{"location":"guides/setup/#installation-using-hyperflask-start","title":"Installation using Hyperflask-Start","text":"<p>We will use Hyperflask-Start to create our project.</p> <p>Info</p> <p>Although it is not mandatory, Hyperflask-Start is the officially recommended experience.</p> <p>Launch the following command to create your project:</p> <pre><code>curl -L https://raw.githubusercontent.com/hyperflask/hyperflask-start/main/start.sh | bash\n</code></pre> <p>This will prompt you for some options and create the project in a new folder.</p> <p>Open your project folder in VS Code. It should prompt you to \"re-open workspace in development container\" which you should accept. VS Code will create and start the development container and re-launch itself.</p> <p>You are now developping from the container inside which you will find Python 3.11, Node &amp; npm and hyperflask installed.</p>"},{"location":"guides/setup/#installation-without-hyperflask-start","title":"Installation without Hyperflask-Start","text":"<ol> <li>Create your project directory: <code>mkdir example-project &amp;&amp; cd example-project</code></li> <li>Create and activate a virtualenv: <code>python -m venv .venv &amp;&amp; source .venv/bin/activate</code></li> <li><code>pip install hyperflask</code></li> <li>Create a pages directory: <code>mkdir pages</code></li> <li>Create your index page: <code>echo \"hello world\" &gt; pages/index.html</code></li> <li>Start a development server using <code>hyperflask dev</code></li> </ol>"},{"location":"guides/structure/","title":"Project structure","text":"<p>Info</p> <p>This guide assumes you have created your app using Hyperflask-Start</p> <p>In your project folder, you will find the following files and folders:</p> <ul> <li>app: your app code<ul> <li>assets: scripts and stylesheets that will be bundled using esbuild<ul> <li>main.css: tailwind entrypoint</li> </ul> </li> <li>components: components to compose your app</li> <li>pages: your site pages</li> </ul> </li> <li>public: all files in this folder are publicly accessible</li> <li>tests: tests using pytest</li> <li>.env: environment variables</li> <li>config.yml: your app configuration file</li> <li>Dockerfile: Dockerfile to build your production image</li> <li>pyproject.toml: list python dependencies and tool options</li> <li>package.json: list javascript dependencies</li> </ul> <p>When using the <code>hyperflask</code> command, an Hyperflask app instance will be automatically created from the app folder.</p> <p>Info</p> <p>If you are coming from Flask, this means you do not create the <code>app</code> object yourself.</p> <p>The actuall application object is available at <code>hyperflask.factory:app</code> (or <code>hyperflask:current_app</code> when in app context).</p> <p>The app folder is available as a python module and the following packages will be automatically imported from it if they exist:</p> <ul> <li>models : to define your database models</li> <li>routes : to define app routed endpoints</li> <li>tasks: to define background tasks using dramatiq</li> <li>cron: to define scheduled tasks using dramatiq</li> <li>cli: to define command line tasks</li> </ul> <p>To import things from these modules from the rest of your app:</p> <pre><code># app/models.py\nfrom hyperflask.factory import db\n\nclass MyModel(db.Model):\n    pass\n</code></pre> <pre><code># anywhere else\nfrom app.models import MyModel\n</code></pre>"},{"location":"guides/structure/#manually-creating-the-app","title":"Manually creating the app","text":"<p>An app will be automatically created only if no application can be automatically discovered following the Flask mechanism.</p> <p>To manually create an app, create an <code>__init__.py</code> file in the app folder with the following code:</p> <pre><code>from hyperflask import Hyperflask\n\napp = Hyperflask(__name__)\n</code></pre> <p>When doing so, no automatic configuration or imports are performed.</p>"},{"location":"guides/tasks/","title":"Background tasks","text":"<p>Perform long-running or blocking tasks in the background.</p> <p>Info</p> <p>This feature is provided by Flask-Dramatiq</p>"},{"location":"guides/tasks/#creating-tasks","title":"Creating tasks","text":"<p>Tasks are python functions decorated with <code>@app.actor</code>.</p> <p>In app/tasks.py:</p> <pre><code>from hyperflask.factory import app\n\n@app.actor\ndef fetch_url(url):\n    # ...\n</code></pre>"},{"location":"guides/tasks/#queuing-tasks","title":"Queuing tasks","text":"<p>Tasks can be queued for execution from anywhere:</p> <pre><code>from app.tasks import fetch_url\nfetch_url.send(\"http://...\")\n</code></pre>"},{"location":"guides/tasks/#brokers","title":"Brokers","text":"<p>The component queueing and dispatching tasks is called a \"broker\". Dramatiq supports multiple brokers: Rabbitmq, Redis, Amazon SQS, Postgresql.</p> <p>The default broker used in Hyperflask uses sqlite. It does not require any kind of setup but will not scale past 1 server. If you want to offload your background processing to a second server, use redis or postgresql.</p>"},{"location":"guides/users/","title":"User management","text":"<p>Info</p> <p>This feature is provided by Hyperflask-Users. It uses Flask-Login for session management.</p>"},{"location":"guides/users/#installation","title":"Installation","text":"<pre><code>uv add hyperflask-users\n</code></pre>"},{"location":"guides/users/#setup","title":"Setup","text":"<p>Hyperflask-Users requires the creation of a user model.</p> <pre><code>from hyperflask.factory import db\nfrom hyperflask_users import UserMixin\n\nclass User(UserMixin, db.Model):\n    pass\n</code></pre>"},{"location":"guides/users/#protecting-pages","title":"Protecting pages","text":"<p>Use <code>page.login_required()</code> at the start of any page code block to prevent access for unauthentified users. You can also decorate endpoints and method functions using the <code>hyperflask_users.login_required</code> decorator.</p> <pre><code>---\npage.login_required()\n---\nYour email is {{current_user.email}}\n</code></pre> <p>When a protected page is accessed, if the user is not authentified, it redirects to the default connection page.</p> <p>The <code>current_user</code> object is automatically available in pages. It represents the current user model object. Use <code>current_user.is_authentified</code> to check if a user is authentified.</p>"},{"location":"guides/users/#connection-using-email-and-code","title":"Connection using email and code","text":"<p>The default connection mode is using an email with a verification code sent at this email. This prevents the need for storing passwords and reduce the attack surface.</p> <p>Warning</p> <p>This means a properly configured email server is needed.</p> <p>To redirect to the connection page use <code>url_for('auth.connect')</code>.</p>"},{"location":"guides/users/#connection-using-email-and-password","title":"Connection using email and password","text":"<p>Add the following configuration in your app config.yml:</p> <pre><code>auth_allowed_flows: ['password']\n</code></pre> <p>This will disable code based login and require to signup the traditionnal way (keep \"connect\" in the list of allowed_flows to allow both methods)</p>"},{"location":"guides/users/#connection-using-oauth","title":"Connection using OAuth","text":"<p>Add the following configuration in your app config.yml:</p> <pre><code>auth_allowed_flows: ['oauth']\nauth_sso_providers: ['google', 'facebook']\ngoogle_client_id: \"...\"\ngoogle_client_secret: \"...\"\nfacebook_client_id: \"...\"\nfacebook_client_secret: \"...\"\n</code></pre>"},{"location":"recipes/analytics/","title":"Web &amp; product analytics","text":"<p>See Flask-Product-Analytics</p>"},{"location":"recipes/going-to-production/","title":"Going to production","text":""},{"location":"recipes/going-to-production/#infrastucture","title":"Infrastucture","text":"<ol> <li>Purchase a domain and configure DNS</li> <li>Deploy your app to a VPS or docker hosting using <code>hyperflask deploy</code></li> <li>Setup smtp server and configure your app</li> <li>Setup error monitoring (and optionnaly analytics)</li> <li>Review checklist</li> <li>Annoucement !</li> </ol>"},{"location":"recipes/going-to-production/#checklist","title":"Checklist","text":""},{"location":"recipes/going-to-production/#content","title":"Content","text":"<ul> <li> Favicon</li> <li> Spelling &amp; grammar</li> <li> Optimized images</li> </ul>"},{"location":"recipes/going-to-production/#testing","title":"Testing","text":"<ul> <li> Check website in all browsers</li> <li> Mobile tests</li> <li> Test emails</li> <li> Run Google Lighthouse audit</li> </ul>"},{"location":"recipes/going-to-production/#security","title":"Security","text":"<p>Hyperflask setups all needed security headers.</p> <ul> <li> Review OWASP Top 10 list</li> <li> Ensure HTTPS is mandatory</li> </ul>"},{"location":"recipes/going-to-production/#accessibility","title":"Accessibility","text":"<p>Hyperflask UI components respect accessibility guidelines.</p> <ul> <li> Accessibility validation</li> <li> Color contrast</li> <li> WAI-ARIA Landmarks</li> </ul>"},{"location":"recipes/going-to-production/#legal","title":"Legal","text":"<p>Mandatory as soon as you save user generated data.</p> <ul> <li> Terms and Conditions</li> <li> Privacy Policy</li> <li> GDPR compliance</li> <li> Ensure that a contact email is available</li> </ul>"},{"location":"recipes/going-to-production/#seo","title":"SEO","text":"<ul> <li> Google Rich Snippets</li> <li> Structured data</li> <li> robots.txt</li> <li> Sitemaps</li> <li> Social media headers</li> </ul>"},{"location":"recipes/monitoring/","title":"Monitoring","text":"<p>Monitoring is critical when running app in production. It gives you visibility across your infrastructure and allows you to debug issues without touching production servers.</p> <p>OpenTelemetry is a set of standards meant to observe production environments across the stack, from server to application. It is a complex system that seems daunting but the Hyperflask stack integrates it in a seamless manner.</p> <p>Parallel to Open Telemetry, Sentry provides error monitoring allowing you to quickly investigate errors in production. Sentry can also provide performance monitoring, equivalent to OpenTelemetry traces.</p> <p>Both are needed for proper monitoring of your infrastructure but Sentry may be sufficient when running on managed hosting providers.</p>"},{"location":"recipes/monitoring/#error-monitoring-using-sentry","title":"Error monitoring using Sentry","text":"<p>It can be easily setup using Flask-Sentry:</p> <p>Install Flask-Sentry:</p> <pre><code>uv add flask-sentry\n</code></pre> <p>Activate the extension in config.yml:</p> <pre><code>flask_extensions:\n    - \"flask_sentry:Sentry\":\n        dsn: \"http://DSN\"\n</code></pre> <p>To track frontend errors, override the default layout in app/layouts/default.html:</p> <pre><code>{% extends \"layouts/base.html %}\n\n{% block head_assets %}\n    {{ init_sentry() }}\n{% endblock %}\n</code></pre>"},{"location":"recipes/monitoring/#when-using-a-vps","title":"When using a VPS","text":"<p>When deploying to a VPS using <code>hyperflask deploy</code>, the server is configured to be monitored using OpenTelemetry.</p> <p>A local OpenTelemetry Collector is installed on the machine to gather all telemetry data before forwarding it to a remote service. By default, the collector will gather:</p> <ul> <li>server metrics</li> <li>logs</li> </ul> <p>To collect application metrics as well, use Flask-Observability.</p> <p>Log files are always stored locally and rotated daily.</p> <p>Grafana is a great service to store and visualize your monitoring data. Their cloud service has a generous free tier but it is hard to self host. It can be used as an OLTP endpoint to collect OpenTelemetry data. Configure the collector to export to this endpoint.</p> <p>Signoz is an alternative that is purpose built for OpenTelemetry and that can be easily self hosted.</p> <p>Tip</p> <p>Checkout docker-web-deploy documentation for more info.</p>"},{"location":"recipes/monitoring/#uptime-monitoring","title":"Uptime monitoring","text":"<p>Uptime monitoring allows you to recieve alerts when your infrastructure is completely down and measures how long it has been down.</p> <p>Check out UptimeRobot (commercial service, no affiliation).</p>"},{"location":"recipes/sending-emails/","title":"Sending emails","text":"<p>The emails guide covered creating email templates and sending them. This guide covers setting up the rest of the infrastructure.</p>"},{"location":"recipes/sending-emails/#using-a-cloud-provider","title":"Using a cloud provider","text":"<p>There are many available providers. Below we list some of the most popular ones. As many offer a free plan, it is good to have 2 setup with one as backup in case of outages.</p> Name Location Price Mailgun US, EU 100 emails/day for free, 10k emails for 15$/month in the base plan Brevo EU 300 emails/month for free, 5k emails for 7\u20ac/month in the base plan Postmark US 100 emails/month for free, 10k emails for 15$/month in the base plan Sendgrid US (EU available for extra) 20$/month for 50k+ emails in the base plan Amazon SES US, EU, Asia, ... 0.10 USD / 1000 emails <p>To use one of these services with hyperflask, retrieve the SMTP connection settings from your account and configure your app accordingly.</p> <p>Remember to properly configure SPF, DKIM and DMARC to guarantee delivery.</p>"},{"location":"recipes/sending-emails/#self-hosting-an-smtp-server","title":"Self-hosting an SMTP server","text":"<p>We do not recommand self-hosting your SMTP server as delivery guarantee is tough for unknown servers.</p> <p>If you wish to go this route, simply installing <code>postfix</code> and properly configuring your DNS will get you started.</p>"},{"location":"recipes/stripe/","title":"Stripe Checkout","text":"<p>The Hypeflask organization maintains the Flask-Stripe-Checkout project. Using it, you can quickly start charging people using Stripe Checkout, Stripe's hosted payment pages.</p>"},{"location":"recipes/stripe/#installation-setup","title":"Installation &amp; setup","text":"<p>First, create a Stripe account:</p> <ol> <li>Signup</li> <li>Retrieve your API key</li> <li>Register your webhook (<code>https://yourdomain/stripe-webhook</code>) and retrieve your endpoint secret</li> </ol> <p>To use webhooks locally:</p> <ol> <li>Download stripe-cli</li> <li>Login with <code>stripe login</code></li> <li>Run <code>stripe listen --forward-to localhost:5000/stripe-webhook</code></li> </ol> <p>Now, install the extension:</p> <pre><code>poetry add flask-stripe-checkout\n</code></pre> <p>Configure your environment variables in .env:</p> <pre><code>FLASK_STRIPE_API_KEY=sk_...\nFLASK_STRIPE_WEBHOOKS_ENDPOINT_SECRET=whsec_...\n</code></pre> <p>Activate the extension in your app in config.yml:</p> <pre><code>flask_extensions:\n    - \"flask_stripe_checkout:StripeCheckout\"\n</code></pre>"},{"location":"recipes/stripe/#selling-products-using-a-cart","title":"Selling products using a cart","text":"<p>Add product to the cart using the following snippet:</p> <pre><code>from flask_stripe_checkout import current_cart\n\ndef post():\n    current_cart.add(price=\"stripe_price_id\", quantity=1)\n</code></pre> <p>Create a checkout session for payment using:</p> <pre><code>from flask_stripe_checkout import current_cart\n\ndef post():\n    return current_cart.checkout()\n</code></pre> <p>See Flask-Stripe-Checkout documentation for more info.</p>"},{"location":"recipes/stripe/#selling-subscriptions","title":"Selling subscriptions","text":"<p>Subscription work in a similar way but you don't need to add item to the cart.</p> <pre><code>from flask_stripe_checkout.subscription import subscription_checkout\n\ndef post():\n    return subscription_checkout(\"subscription_price_id\", optional_customer_reference)\n</code></pre> <p>See Flask-Stripe-Checkout documentation for more info.</p>"},{"location":"recipes/using-cms/","title":"Using a CMS","text":"<p>Hyperflask collections can use an external CMS to fetch content. This can improve the content editing experience for your team while giving you increased control on the rendering.</p> <p>We recommend using Strapi as a headless CMS.</p> <p>Once you have setup a Strapi account (either cloud or self hosted), create a strapi-backed collection using the following configuration in config.yml:</p> <pre><code>collections:\n    strapi_content_type_name:\n        strapi_url: \"http://yourstrapidomain.com/api/your-content-type-id\"\n        auth_token: \"your strapi api token\"\n</code></pre>"}]}