{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<ul> <li> <p> Why Hyperflask ?</p> <p>Discover the project goals and technologies used</p> <p>Read more</p> </li> <li> <p> Get started</p> <p>Tutorial to create &amp; deploy your first Hyperflask project</p> <p>Start now</p> </li> <li> <p> In-depth guides</p> <p>Deep dive into Hyperflask and all its possibilities</p> <p>Read more</p> </li> </ul>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>Will be using Hyperflask-Start to create our project.</p> <p>Launch the following command to setup your project:</p> <pre><code>curl -L https://raw.githubusercontent.com/hyperflask/hyperflask-start/start.sh | bash\n</code></pre> <p>This will prompt you for some options and create the project in a new folder.</p>"},{"location":"getting-started/#_1","title":"Getting started","text":""},{"location":"why/","title":"Why Hyperflask ?","text":"<p>The goal of the Hyperflask stack is to provide a single unified web stack, built on top of Python and proven technologies, where all components have been designed to work together seamlessly.</p> <p>It intends to provide solo devs and small teams a solution that allows them to build and operate a website/web app with minimal boilerplate and overhead. All the focus can go to work on the actual product.</p>"},{"location":"why/#key-goals","title":"Key goals","text":"<ul> <li>Full stack experience, from dev environment to UI framework to deployment</li> <li>All the tech choices have been made so you don't need to ask yourself tech stack questions</li> <li>Fully Open-Source stack that is 100% self-hostable if desired (no dependencies on cloud services)</li> <li>Use proven technologies and rely on standards as much as possible</li> <li>Backend driven with static content generation when needed</li> <li>Built for pragmatical but professional production apps</li> <li>Great developer experience and high productivity</li> <li>Beginner friendly but well engineered for advanced use cases</li> <li>Optimized for solo developers and small teams</li> <li>Can run on cheap machines or VMs from any server/cloud providers</li> <li>Respect privacy and limit data collection (GDPR compliant by default)</li> </ul>"},{"location":"why/#features-and-technologies","title":"Features and technologies","text":"<ul> <li>Web framework built on top of Flask as a set of extensions</li> <li>File-based and/or app-based routing</li> <li>A new file format combining python code in frontmatter and html templates to define routes</li> <li>SQL focused ORM with sqlorm, optimized for sqlite</li> <li>Modern asset pipeline using esbuild and tailwindcss</li> <li>Easily create reusable components for your templates, compatible with Storybook</li> <li>Component library based on daisyUI with icons from Bootstrap Icons</li> <li>Deep integration with htmx</li> <li>Seamless reactivity between frontend and backend</li> <li>Authentication and user management with social logins and MFA</li> <li>Static content collections to easily create blogs and manage static content</li> <li>File management with built-in image manipulation and S3 integration</li> <li>Template based emails with mjml support</li> <li>Background tasks using dramatiq</li> <li>Push support for realtime pages using server-sent events</li> <li>PWA support (with web push support)</li> <li>I18n using gettext</li> <li>Static, hybrid or dynamic modes for content serving</li> <li>Good debugging experience with debugpy and Flask-DebugToolbar dev tools</li> <li>Observable with OpenTelemetry</li> <li>Dev environment based on Development Containers</li> <li>Provisioning and containerized deployments using OpenTofu and Ansible</li> </ul>"},{"location":"why/#the-hyperflask-umbrella","title":"The Hyperflask umbrella","text":"<p>Many of the features of the Hyperflask framework are provided through Flask extensions and other libraries. A good portion of them are being developed under the Hyperflask umbrella. They are kept independant so they can be re-used in other projects outside of Hyperflask.</p> <p>Checkout the Github organization for the list of projects.</p>"},{"location":"why/#reasoning","title":"Reasoning","text":"<p>There are so many choices to make nowadays: what backend framework, what build tools, what frontend framework, how to deploy, how to easily develop locally, etc... The development world, and especially the javascript world, moves at a very fast pace which feels overwhelming and hard to keep track. There is a lot of good stuff happening but at the same time it often feels needlessly over engineered. The focus is mostly on frontend frameworks and the javascript stack.</p> <p>I think the \"SPA everything\" trend has reach its apogee. I never understood why use frontend component frameworks to build blogs as SPA apps. It seems ridiculous. This trend is shifting, with the rise of SSR in the javascript world. But it feels like they are rediscovering water.</p> <p>I do not find the direction React Server Components are taking appealing. Blurring the line between frontend and backend has been tried before and it often leads to spaghetti code bases that are hard to maintain. Furthermore, I feel the backend building experience in javascript has never been great, far from python, php or rails.</p> <p>At the same time, I feel the developer experience is lacking in many areas. There's so many moving parts to learn and manage, it's daunting. It's especially hard for beginners.</p> <p>In the end, I love Python and Flask and want to continue building modern websites with them. Unfortunately, I felt a lot of extensions have become outdated and Flask being minimalist, no large scale frameworks around it. Hyperflask is my attempt to a super-powered Flask-based stack.</p> <p>Hyperflask aims to be the Laravel of the Python world.</p>"},{"location":"why/#acknowledgments","title":"Acknowledgments","text":"<p>Hyperflask is inspired by many:</p> <ul> <li>Ruby on Rails because of their backend-first, one man framework philosophy</li> <li>Astro for their page format and static content-first approach</li> <li>Jekyll for their content collections</li> <li>htmx for allowing to build web sites with minimal custom js</li> <li>Laravel for the everything included approach</li> <li>and many other open source projects</li> </ul>"},{"location":"guides/apppy/","title":"app.py","text":""},{"location":"guides/architecture/","title":"Architecture","text":""},{"location":"guides/assets/","title":"Assets","text":""},{"location":"guides/auth/","title":"Authentication","text":""},{"location":"guides/auth/#installation","title":"Installation","text":"<pre><code>poetry add hyperflask-auth\n</code></pre>"},{"location":"guides/auth/#setup","title":"Setup","text":""},{"location":"guides/components/","title":"Components","text":""},{"location":"guides/deploy/","title":"Deploying","text":""},{"location":"guides/emails/","title":"Emails","text":""},{"location":"guides/forms/","title":"Forms","text":""},{"location":"guides/i18n/","title":"Internationalization","text":""},{"location":"guides/models/","title":"Models","text":""},{"location":"guides/pages/","title":"Pages","text":""},{"location":"guides/pages/#using-page-actions","title":"Using page actions","text":"<p>Page actions allow you to handle multiple actions through a single POST endpoint.</p> <pre><code>from flask import Flask, render_template_string\nfrom flask_mercure import Mercure\nfrom flask_stream import PushStream, page_action\n\napp = Flask(__name__)\nMercure(app)\nstream = PushStream(app)\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n\n    @page_action\n    def on_send():\n        stream.append_to(\"#messages\", f\"&lt;p&gt;{request.form['message']}&lt;/p&gt;\")\n\n    @page_action\n    def on_clear():\n        stream.replace_content(\"#messages\", \"\")\n\n    return render_template_string(\"\"\"\n        &lt;form {{hx_page_action(\"send\")}}&gt;\n            &lt;textarea name=\"message\"&gt;&lt;/textarea&gt;\n            &lt;button type=\"submit\"&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;div id=\"messages\"&gt;&lt;/div&gt;\n        &lt;button {{hx_page_action(\"clear\")}}&gt;clear all&lt;/button&gt;\n        {{connect_push_stream(include_scripts=True)}}\n    \"\"\")\n</code></pre>"},{"location":"guides/provisioning/","title":"Provisioning","text":""},{"location":"guides/push/","title":"Push","text":""},{"location":"guides/pwa/","title":"Progressive Web Apps","text":""},{"location":"guides/setup/","title":"Setup","text":""},{"location":"guides/setup/#installation","title":"Installation","text":""},{"location":"guides/setup/#creating-a-new-project","title":"Creating a new project","text":""},{"location":"guides/setup/#development-environment","title":"Development environment","text":""},{"location":"guides/structure/","title":"Project structure","text":""},{"location":"guides/tasks/","title":"Tasks","text":""},{"location":"guides/basics/forms/","title":"Forms","text":""},{"location":"guides/basics/models/","title":"Models","text":""},{"location":"guides/basics/pages/","title":"Pages","text":""},{"location":"guides/basics/pages/#using-page-actions","title":"Using page actions","text":"<p>Page actions allow you to handle multiple actions through a single POST endpoint.</p> <pre><code>from flask import Flask, render_template_string\nfrom flask_mercure import Mercure\nfrom flask_stream import PushStream, page_action\n\napp = Flask(__name__)\nMercure(app)\nstream = PushStream(app)\n\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n\n    @page_action\n    def on_send():\n        stream.append_to(\"#messages\", f\"&lt;p&gt;{request.form['message']}&lt;/p&gt;\")\n\n    @page_action\n    def on_clear():\n        stream.replace_content(\"#messages\", \"\")\n\n    return render_template_string(\"\"\"\n        &lt;form {{hx_page_action(\"send\")}}&gt;\n            &lt;textarea name=\"message\"&gt;&lt;/textarea&gt;\n            &lt;button type=\"submit\"&gt;Send&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;div id=\"messages\"&gt;&lt;/div&gt;\n        &lt;button {{hx_page_action(\"clear\")}}&gt;clear all&lt;/button&gt;\n        {{connect_push_stream(include_scripts=True)}}\n    \"\"\")\n</code></pre>"},{"location":"guides/basics/structure/","title":"Project structure","text":""},{"location":"guides/frontend/assets/","title":"Assets","text":""},{"location":"guides/frontend/components/","title":"Components","text":""},{"location":"guides/frontend/interactions/","title":"Interactions","text":""},{"location":"guides/frontend/interactions/#htmx","title":"htmx","text":""},{"location":"guides/frontend/interactions/#custom-js","title":"Custom JS","text":""},{"location":"guides/going-further/apppy/","title":"app.py","text":""},{"location":"guides/going-further/auth/","title":"Authentication","text":""},{"location":"guides/going-further/emails/","title":"Emails","text":""},{"location":"guides/going-further/i18n/","title":"Internationalization","text":""},{"location":"guides/going-further/push/","title":"Push","text":""},{"location":"guides/going-further/pwa/","title":"Progressive Web Apps","text":""},{"location":"guides/going-further/tasks/","title":"Tasks","text":""},{"location":"guides/going-to-prod/deploy/","title":"Deploying","text":""},{"location":"guides/going-to-prod/provisioning/","title":"Provisioning","text":""},{"location":"recipes/analytics/","title":"Web &amp; product analytics","text":""},{"location":"recipes/monitoring/","title":"Monitoring","text":""},{"location":"recipes/sending-emails/","title":"Sending emails","text":""},{"location":"recipes/stripe/","title":"Stripe Checkout","text":""},{"location":"recipes/using-cms/","title":"Using a CMS","text":""}]}